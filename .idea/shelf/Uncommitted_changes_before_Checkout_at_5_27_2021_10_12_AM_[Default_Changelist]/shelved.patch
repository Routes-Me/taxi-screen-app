Index: app/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Add project specific ProGuard rules here.\r\n# You can control the set of applied configuration files using the\r\n# proguardFiles setting in build.gradle.\r\n#\r\n# For more details, see\r\n#   http://developer.android.com/guide/developing/tools/proguard.html\r\n\r\n# If your project uses WebView with JS, uncomment the following\r\n# and specify the fully qualified class name to the JavaScript interface\r\n# class:\r\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\r\n#   public *;\r\n#}\r\n\r\n# Uncomment this to preserve the line number information for\r\n# debugging stack traces.\r\n#-keepattributes SourceFile,LineNumberTable\r\n\r\n# If you keep the line number information, uncomment this to\r\n# hide the original source file name.\r\n#-renamesourcefileattribute SourceFile\r\n\r\n-keepattributes Signature\r\n\r\n# For using GSON @Expose annotation\r\n-keepattributes *Annotation*\r\n\r\n# Gson specific classes\r\n-dontwarn sun.misc.**\r\n#-keep class com.google.gson.stream.** { *; }\r\n\r\n# Application classes that will be serialized/deserialized over Gson\r\n-keep class com.routesme.taxi.** { <fields>; }\r\n#-keep class com.microsoft.signalr.** { *; }\r\n#-keep interface com.microsoft.signalr.** { *; }\r\n\r\n# Prevent proguard from stripping interface information from TypeAdapter, TypeAdapterFactory,\r\n# JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)\r\n-keep class * extends com.google.gson.TypeAdapter\r\n-keep class * implements com.google.gson.TypeAdapterFactory\r\n-keep class * implements com.google.gson.JsonSerializer\r\n-keep class * implements com.google.gson.JsonDeserializer\r\n\r\n# Prevent R8 from leaving Data object members always null\r\n-keepclassmembers,allowobfuscation class * {\r\n  @com.google.gson.annotations.SerializedName <fields>;\r\n}\r\n\r\n-keepattributes *Annotation*\r\n-keepclassmembers class * {\r\n    @org.greenrobot.eventbus.Subscribe <methods>;\r\n}\r\n-keep enum org.greenrobot.eventbus.ThreadMode { *; }\r\n\r\n# And if you use AsyncExecutor:\r\n-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {\r\n    <init>(java.lang.Throwable);\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/proguard-rules.pro	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
+++ app/proguard-rules.pro	(date 1622027959689)
@@ -30,9 +30,9 @@
 #-keep class com.google.gson.stream.** { *; }
 
 # Application classes that will be serialized/deserialized over Gson
--keep class com.routesme.taxi.** { <fields>; }
-#-keep class com.microsoft.signalr.** { *; }
-#-keep interface com.microsoft.signalr.** { *; }
+-keep class com.routesme.vehicles.** { <fields>; }
+-keep class com.microsoft.signalr.** { *; }
+-keep interface com.microsoft.signalr.** { *; }
 
 # Prevent proguard from stripping interface information from TypeAdapter, TypeAdapterFactory,
 # JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)
@@ -46,6 +46,14 @@
   @com.google.gson.annotations.SerializedName <fields>;
 }
 
+-assumenosideeffects class android.util.Log {
+  public static *** v(...);
+  public static *** d(...);
+  public static *** i(...);
+  public static *** w(...);
+  public static *** e(...);
+}
+
 -keepattributes *Annotation*
 -keepclassmembers class * {
     @org.greenrobot.eventbus.Subscribe <methods>;
Index: app/src/main/java/com/routesme/vehicles/api/ApiWorker.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.vehicles.api\r\n\r\nimport android.content.Context\r\nimport com.google.gson.GsonBuilder\r\nimport com.routesme.vehicles.api.interceptors.ReceivedCookiesInterceptor\r\nimport com.routesme.vehicles.api.interceptors.RedirectInterceptor\r\nimport com.routesme.vehicles.api.interceptors.TokenAuthenticator\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.logging.HttpLoggingInterceptor\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport java.security.KeyManagementException\r\nimport java.security.NoSuchAlgorithmException\r\nimport java.util.concurrent.TimeUnit\r\n\r\n\r\nclass ApiWorker(val context: Context) {\r\n\r\n    private var mClient: OkHttpClient? = null\r\n    private var mGsonConverter: GsonConverterFactory? = null\r\n    private val interceptor = HttpLoggingInterceptor()\r\n\r\n    val client: OkHttpClient\r\n        @Throws(NoSuchAlgorithmException::class, KeyManagementException::class)\r\n        get() {\r\n            if (mClient == null) {\r\n                mClient = OkHttpClient.Builder().apply {\r\n                    connectTimeout(1, TimeUnit.MINUTES)\r\n                    readTimeout(30, TimeUnit.SECONDS)\r\n                    writeTimeout(15, TimeUnit.SECONDS)\r\n                    addInterceptor(interceptor.setLevel(HttpLoggingInterceptor.Level.BODY))\r\n                    addInterceptor(BasicAuthInterceptor())\r\n                    addInterceptor(ReceivedCookiesInterceptor())\r\n                    addInterceptor(RedirectInterceptor())\r\n                    followSslRedirects(false)\r\n                    // addInterceptor(NotAcceptableRefreshTokenInterceptor(context))\r\n                    authenticator(TokenAuthenticator(context))\r\n                    //  if (context !is LoginActivity) addInterceptor(UnauthorizedInterceptor(context))\r\n                }.build()\r\n            }\r\n            return mClient!!\r\n        }\r\n\r\n    val gsonConverter: GsonConverterFactory?\r\n        get() {\r\n            if (mGsonConverter == null)\r\n                mGsonConverter = GsonConverterFactory.create(GsonBuilder().setLenient().disableHtmlEscaping().create())\r\n\r\n            return mGsonConverter\r\n        }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/routesme/vehicles/api/ApiWorker.kt	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
+++ app/src/main/java/com/routesme/vehicles/api/ApiWorker.kt	(date 1622027551090)
@@ -27,7 +27,7 @@
                     connectTimeout(1, TimeUnit.MINUTES)
                     readTimeout(30, TimeUnit.SECONDS)
                     writeTimeout(15, TimeUnit.SECONDS)
-                    addInterceptor(interceptor.setLevel(HttpLoggingInterceptor.Level.BODY))
+                    //addInterceptor(interceptor.setLevel(HttpLoggingInterceptor.Level.BODY))
                     addInterceptor(BasicAuthInterceptor())
                     addInterceptor(ReceivedCookiesInterceptor())
                     addInterceptor(RedirectInterceptor())
Index: app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.vehicles.view.fragment\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.*\r\nimport android.os.Bundle\r\nimport android.os.IBinder\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.work.ExistingPeriodicWorkPolicy\r\nimport androidx.work.WorkManager\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.RequestManager\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\r\nimport com.bumptech.glide.request.RequestOptions\r\nimport com.routesme.vehicles.data.model.ContentResponse\r\nimport com.routesme.vehicles.data.model.Data\r\nimport com.routesme.vehicles.R\r\nimport com.routesme.vehicles.helper.AdvertisementsHelper\r\nimport com.routesme.vehicles.helper.DateHelper\r\nimport com.routesme.vehicles.helper.DateOperations\r\nimport com.routesme.vehicles.helper.SharedPreferencesHelper\r\nimport com.routesme.vehicles.room.AdvertisementDatabase\r\nimport com.routesme.vehicles.room.factory.ViewModelFactory\r\nimport com.routesme.vehicles.room.helper.DatabaseHelperImpl\r\nimport com.routesme.vehicles.room.viewmodel.RoomDBViewModel\r\nimport com.routesme.vehicles.App\r\nimport com.routesme.vehicles.service.VideoService\r\nimport com.routesme.vehicles.view.adapter.BottomBannerAdapter\r\nimport com.routesme.vehicles.view.adapter.ImageBannerAdapter\r\nimport com.routesme.vehicles.view.adapter.WifiAndQRCodeAdapter\r\nimport com.routesme.vehicles.view.events.AnimateVideo\r\nimport com.routesme.vehicles.view.events.DemoVideo\r\nimport com.routesme.vehicles.view.utils.Type\r\nimport com.routesme.vehicles.viewmodel.ContentViewModel\r\nimport dmax.dialog.SpotsDialog\r\nimport kotlinx.android.synthetic.taxi.content_fragment.*\r\nimport kotlinx.android.synthetic.taxi.date_cell.*\r\nimport kotlinx.coroutines.*\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.io.IOException\r\nimport java.util.*\r\n\r\nclass ContentFragment : Fragment(), CoroutineScope by MainScope() {\r\n    private val SEND_ANALYTICS_REPORT = \"SEND_ANALYTICS_REPORT\"\r\n    private lateinit var mContext: Context\r\n    private var sharedPreferences: SharedPreferences? = null\r\n    private var editor: SharedPreferences.Editor? = null\r\n    private var device_id: String = \"\"\r\n    private val SEC: Long = 30\r\n    private var position = 0\r\n    private val MIL: Long = 1000\r\n    private var count = 0\r\n    private var dialog: SpotsDialog? = null\r\n    private var isAlive = false\r\n    private val dateOperations = DateOperations.instance\r\n    private lateinit var callApiJob: Job\r\n    private var bottomBannerAdapter: BottomBannerAdapter? = null\r\n    private var wifiAndQRCodeAdapter: WifiAndQRCodeAdapter? = null\r\n    private var imageBannerAdapter: ImageBannerAdapter? = null\r\n    private lateinit var viewModel: RoomDBViewModel\r\n    private var date = Date()\r\n    private lateinit var dbHelper : DatabaseHelperImpl\r\n    private lateinit var glide: RequestManager\r\n    private lateinit var contentViewModel: ContentViewModel\r\n    private lateinit var imageOptions: RequestOptions\r\n    private var workManager = WorkManager.getInstance()\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        mContext = context\r\n    }\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view : View = inflater.inflate(R.layout.content_fragment, container, false)\r\n        return view\r\n    }\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        callApiJob = Job()\r\n        sharedPreferences = context?.getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE)\r\n        editor= sharedPreferences?.edit()\r\n        glide = Glide.with(App.instance)\r\n        imageOptions = RequestOptions().diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)\r\n        device_id = sharedPreferences?.getString(SharedPreferencesHelper.device_id, null)!!\r\n        viewModel = ViewModelProvider(this, ViewModelFactory(DatabaseHelperImpl(AdvertisementDatabase.invoke(mContext)))).get(RoomDBViewModel::class.java)\r\n        contentViewModel = ViewModelProvider(this.requireActivity()).get(ContentViewModel::class.java)\r\n        dbHelper = DatabaseHelperImpl(AdvertisementDatabase.invoke(mContext))\r\n        workManager.enqueueUniquePeriodicWork(SEND_ANALYTICS_REPORT, ExistingPeriodicWorkPolicy.KEEP, App.periodicWorkRequest)\r\n        fetchContent()\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun setTime() {\r\n\r\n        launch {\r\n            while (isActive){\r\n                date = Date()\r\n                clockTv.text = dateOperations.timeClock(date)\r\n                dayTv.text = \"${dateOperations.dayOfWeek(date)} \\n ${dateOperations.date(date)}\"\r\n                delay(60 * 1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun fetchContent() {\r\n        contentViewModel.getContent(1, 100, mContext)?.observe(viewLifecycleOwner, Observer<ContentResponse> {\r\n            dialog?.dismiss()\r\n            if (it != null) {\r\n                if (it.isSuccess) {\r\n                    val images = it.imageList.toList()\r\n                    val videos = it.videoList.toList()\r\n                    if (images.isNullOrEmpty() && videos.isNullOrEmpty()) {\r\n                        startThread(getString(R.string.no_data_found))\r\n                        return@Observer\r\n                    } else {\r\n                        if (isAlive) removeThread()\r\n                        constraintLayoutDateCell?.let {\r\n                            it.visibility = View.VISIBLE\r\n                        }\r\n                        launch {\r\n                            setTime()\r\n                            if (!images.isNullOrEmpty()) {\r\n                                setUpImageAdapter(images)\r\n                                setUpWifiAndQRCodeAdapter(images)\r\n                            }\r\n                            setUpAdapter(videos)\r\n                            startVideoService(videos)\r\n                        }\r\n                    }\r\n                } else {\r\n\r\n                    if (!it.mResponseErrors?.errors.isNullOrEmpty()) {\r\n                        it.mResponseErrors?.errors?.let {\r\n                            startThread(getString(R.string.no_data_found))\r\n                        }\r\n                    } else if (it.mThrowable != null) {\r\n\r\n                        if (it.mThrowable is IOException) {\r\n                            startThread(getString(R.string.network_Issue))\r\n                        } else {\r\n                            startThread(getString(R.string.conversion_Issue))\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                startThread(getString(R.string.unknown_error))\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun setUpWifiAndQRCodeAdapter(list: List<Data>) {\r\n        wifiAndQRCodeAdapter = WifiAndQRCodeAdapter(mContext, list)\r\n        bottomRightPromotion.apply {\r\n            adapter = wifiAndQRCodeAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n    }\r\n\r\n    private fun setUpAdapter(list: List<Data>) {\r\n        bottomBannerAdapter = BottomBannerAdapter(mContext, list)\r\n        bottomLeftPromtion.apply {\r\n            adapter = bottomBannerAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n    }\r\n\r\n    private fun setUpImageAdapter(images: List<Data>) {\r\n        imageBannerAdapter = ImageBannerAdapter(mContext, images)\r\n        viewPageSideBanner.apply {\r\n            adapter = imageBannerAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n        launch {\r\n            while (isActive) {\r\n               /* dbHelper.getList().forEach {\r\n                    Log.d(\"AnalyticsTesting\",\"${it.id},${it.resourceNumber},${it.date},${it.time_in_day},${it.advertisementId},${it.morning},${it.noon},${it.evening},${it.night},\")\r\n                }*/\r\n                val image =  images[count]\r\n                image.contentId?.let {\r\n                    viewModel.insertLog(it, image.resourceNumber!!, DateHelper.instance.getCurrentDate(), DateHelper.instance.getCurrentPeriod(), Type.IMAGE.media_type)\r\n                }\r\n                viewPageSideBanner.setCurrentItem(count, true)\r\n                bottomRightPromotion.setCurrentItem(count, true)\r\n                if (imageBannerAdapter?.itemCount!! - 1 === count) count = 0 else count++\r\n                delay(15 * 1000)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun removeThread() {\r\n        if (callApiJob.isActive) callApiJob.cancelChildren()\r\n        isAlive = false\r\n        EventBus.getDefault().post(DemoVideo(false, \"\"))\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    fun onEvent(animateVideo: AnimateVideo) {\r\n        try {\r\n            launch {\r\n                position = animateVideo.position\r\n                bottomLeftPromtion.setCurrentItem(position, true)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n\r\n        }\r\n    }\r\n\r\n    private fun videoProgressbarRunnable() {\r\n        launch {\r\n            while (isActive) {\r\n                val current = (playerView.player?.currentPosition)!!.toInt()\r\n                val progress = current * 100 / (playerView.player?.duration)!!.toInt()\r\n                videoRingProgressBar?.progress = progress\r\n                delay(1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun startThread(errorMessage: String) {\r\n        isAlive = true\r\n        EventBus.getDefault().post(DemoVideo(true, errorMessage))\r\n        CoroutineScope(Dispatchers.Main + callApiJob).launch {\r\n            delay(SEC * MIL)\r\n            fetchContent()\r\n\r\n        }\r\n    }\r\n\r\n    private fun startVideoService(list: List<Data>) {\r\n        val intent = Intent(mContext, VideoService::class.java)\r\n        intent.putExtra(\"video_list\", list as ArrayList<Data>)\r\n        mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE)\r\n\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        cancel()\r\n        Log.d(\"AnalyticsTesting\",\"Destroy\")\r\n        callApiJob.cancel()\r\n        AdvertisementsHelper.instance.deleteCache()\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        EventBus.getDefault().register(this)\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        EventBus.getDefault().unregister(this)\r\n    }\r\n\r\n    private val connection = object : ServiceConnection {\r\n        override fun onServiceDisconnected(name: ComponentName?) {\r\n\r\n        }\r\n\r\n        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {\r\n            if (service is VideoService.VideoServiceBinder) {\r\n                playerView.player = service.getExoPlayerInstance()\r\n                bottomLeftPromtion.setCurrentItem(playerView.player?.currentPeriodIndex!!, true)\r\n                videoProgressbarRunnable()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
+++ app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt	(date 1621934988463)
@@ -76,7 +76,6 @@
         super.onAttach(context)
         mContext = context
     }
-
     override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
         val view : View = inflater.inflate(R.layout.content_fragment, container, false)
         return view
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_25_PM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_25_PM__Default_Changelist_.xml	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_25_PM__Default_Changelist_.xml	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_5_19_2021_12_25_PM_[Default_Changelist]" date="1621416377638" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_25_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 5/19/2021 12:25 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_23_PM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_23_PM_[Default_Changelist]/shelved.patch	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_23_PM_[Default_Changelist]/shelved.patch	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
@@ -1,82 +0,0 @@
-Index: app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.routesme.vehicles.view.fragment\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.*\r\nimport android.os.Bundle\r\nimport android.os.IBinder\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.work.ExistingPeriodicWorkPolicy\r\nimport androidx.work.WorkManager\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.RequestManager\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\r\nimport com.bumptech.glide.request.RequestOptions\r\nimport com.routesme.vehicles.data.model.ContentResponse\r\nimport com.routesme.vehicles.data.model.Data\r\nimport com.routesme.vehicles.R\r\nimport com.routesme.vehicles.helper.AdvertisementsHelper\r\nimport com.routesme.vehicles.helper.DateHelper\r\nimport com.routesme.vehicles.helper.DateOperations\r\nimport com.routesme.vehicles.helper.SharedPreferencesHelper\r\nimport com.routesme.vehicles.room.AdvertisementDatabase\r\nimport com.routesme.vehicles.room.factory.ViewModelFactory\r\nimport com.routesme.vehicles.room.helper.DatabaseHelperImpl\r\nimport com.routesme.vehicles.room.viewmodel.RoomDBViewModel\r\nimport com.routesme.vehicles.App\r\nimport com.routesme.vehicles.service.VideoService\r\nimport com.routesme.vehicles.view.adapter.BottomBannerAdapter\r\nimport com.routesme.vehicles.view.adapter.ImageBannerAdapter\r\nimport com.routesme.vehicles.view.adapter.WifiAndQRCodeAdapter\r\nimport com.routesme.vehicles.view.events.AnimateVideo\r\nimport com.routesme.vehicles.view.events.DemoVideo\r\nimport com.routesme.vehicles.view.utils.Type\r\nimport com.routesme.vehicles.viewmodel.ContentViewModel\r\nimport dmax.dialog.SpotsDialog\r\nimport kotlinx.android.synthetic.taxi.content_fragment.*\r\nimport kotlinx.android.synthetic.taxi.date_cell.*\r\nimport kotlinx.coroutines.*\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.io.IOException\r\nimport java.util.*\r\n\r\nclass ContentFragment : Fragment(), CoroutineScope by MainScope() {\r\n    private val SEND_ANALYTICS_REPORT = \"SEND_ANALYTICS_REPORT\"\r\n    private lateinit var mContext: Context\r\n    private var sharedPreferences: SharedPreferences? = null\r\n    private var editor: SharedPreferences.Editor? = null\r\n    private var device_id: String = \"\"\r\n    private val SEC: Long = 30\r\n    private var position = 0\r\n    private val MIL: Long = 1000\r\n    private var count = 0\r\n    private var dialog: SpotsDialog? = null\r\n    private var isAlive = false\r\n    private val dateOperations = DateOperations.instance\r\n    private lateinit var callApiJob: Job\r\n    private var bottomBannerAdapter: BottomBannerAdapter? = null\r\n    private var wifiAndQRCodeAdapter: WifiAndQRCodeAdapter? = null\r\n    private var imageBannerAdapter: ImageBannerAdapter? = null\r\n    private lateinit var viewModel: RoomDBViewModel\r\n    private var date = Date()\r\n    private lateinit var glide: RequestManager\r\n    private lateinit var contentViewModel: ContentViewModel\r\n    private lateinit var imageOptions: RequestOptions\r\n    private var workManager = WorkManager.getInstance()\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        mContext = context\r\n    }\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view : View = inflater.inflate(R.layout.content_fragment, container, false)\r\n        return view\r\n    }\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        callApiJob = Job()\r\n        sharedPreferences = context?.getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE)\r\n        editor= sharedPreferences?.edit()\r\n        glide = Glide.with(App.instance)\r\n        imageOptions = RequestOptions().diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)\r\n        device_id = sharedPreferences?.getString(SharedPreferencesHelper.device_id, null)!!\r\n        viewModel = ViewModelProvider(this, ViewModelFactory(DatabaseHelperImpl(AdvertisementDatabase.invoke(mContext)))).get(RoomDBViewModel::class.java)\r\n        contentViewModel = ViewModelProvider(this.requireActivity()).get(ContentViewModel::class.java)\r\n        workManager.enqueueUniquePeriodicWork(SEND_ANALYTICS_REPORT, ExistingPeriodicWorkPolicy.KEEP, App.periodicWorkRequest)\r\n        fetchContent()\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun setTime() {\r\n\r\n        launch {\r\n            while (isActive){\r\n                date = Date()\r\n                clockTv.text = dateOperations.timeClock(date)\r\n                dayTv.text = \"${dateOperations.dayOfWeek(date)} \\n ${dateOperations.date(date)}\"\r\n                delay(60 * 1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun fetchContent() {\r\n        contentViewModel.getContent(1, 100, mContext)?.observe(viewLifecycleOwner, Observer<ContentResponse> {\r\n            dialog?.dismiss()\r\n            if (it != null) {\r\n                if (it.isSuccess) {\r\n                    val images = it.imageList.toList()\r\n                    val videos = it.videoList.toList()\r\n                    if (images.isNullOrEmpty() && videos.isNullOrEmpty()) {\r\n                        startThread(getString(R.string.no_data_found))\r\n                        return@Observer\r\n                    } else {\r\n                        if (isAlive) removeThread()\r\n                        constraintLayoutDateCell?.let {\r\n                            it.visibility = View.VISIBLE\r\n                        }\r\n                        launch {\r\n                            setTime()\r\n                            if (!images.isNullOrEmpty()) {\r\n                                setUpImageAdapter(images)\r\n                                setUpWifiAndQRCodeAdapter(images)\r\n                            }\r\n                            setUpAdapter(videos)\r\n                            startVideoService(videos)\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n\r\n                    if (!it.mResponseErrors?.errors.isNullOrEmpty()) {\r\n                        it.mResponseErrors?.errors?.let {\r\n\r\n                            startThread(getString(R.string.no_data_found))\r\n                        }\r\n                    } else if (it.mThrowable != null) {\r\n\r\n                        if (it.mThrowable is IOException) {\r\n                            startThread(getString(R.string.network_Issue))\r\n\r\n                        } else {\r\n                            startThread(getString(R.string.conversion_Issue))\r\n\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                startThread(getString(R.string.unknown_error))\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun setUpWifiAndQRCodeAdapter(list: List<Data>) {\r\n\r\n        wifiAndQRCodeAdapter = WifiAndQRCodeAdapter(mContext, list)\r\n        bottomRightPromotion.apply {\r\n            adapter = wifiAndQRCodeAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n\r\n    }\r\n\r\n    private fun setUpAdapter(list: List<Data>) {\r\n        bottomBannerAdapter = BottomBannerAdapter(mContext, list)\r\n        bottomLeftPromtion.apply {\r\n            adapter = bottomBannerAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n    }\r\n\r\n    private fun setUpImageAdapter(images: List<Data>) {\r\n        imageBannerAdapter = ImageBannerAdapter(mContext, images)\r\n        viewPageSideBanner.apply {\r\n            adapter = imageBannerAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n        launch {\r\n            while (isActive) {\r\n                images[count].contentId?.let {\r\n                    viewModel.insertLog(it,DateHelper.instance.getCurrentDate(), DateHelper.instance.getCurrentPeriod(), Type.IMAGE.media_type)\r\n                }\r\n                viewPageSideBanner.setCurrentItem(count, true)\r\n                bottomRightPromotion.setCurrentItem(count, true)\r\n                if (imageBannerAdapter?.itemCount!! - 1 === count) count = 0 else count++\r\n                delay(15 * 1000)\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    private fun removeThread() {\r\n        if (callApiJob.isActive) callApiJob.cancelChildren()\r\n        isAlive = false\r\n        EventBus.getDefault().post(DemoVideo(false, \"\"))\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    fun onEvent(animateVideo: AnimateVideo) {\r\n        try {\r\n            launch {\r\n                position = animateVideo.position\r\n                bottomLeftPromtion.setCurrentItem(position, true)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n\r\n        }\r\n    }\r\n\r\n    private fun videoProgressbarRunnable() {\r\n        launch {\r\n            while (isActive) {\r\n                val current = (playerView.player?.currentPosition)!!.toInt()\r\n                val progress = current * 100 / (playerView.player?.duration)!!.toInt()\r\n                videoRingProgressBar?.progress = progress\r\n                delay(1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun startThread(errorMessage: String) {\r\n        isAlive = true\r\n        EventBus.getDefault().post(DemoVideo(true, errorMessage))\r\n        CoroutineScope(Dispatchers.Main + callApiJob).launch {\r\n            delay(SEC * MIL)\r\n            fetchContent()\r\n\r\n        }\r\n    }\r\n\r\n    private fun startVideoService(list: List<Data>) {\r\n        val intent = Intent(mContext, VideoService::class.java)\r\n        intent.putExtra(\"video_list\", list as ArrayList<Data>)\r\n        mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE)\r\n\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        cancel()\r\n        callApiJob.cancel()\r\n        AdvertisementsHelper.instance.deleteCache()\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        EventBus.getDefault().register(this)\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        EventBus.getDefault().unregister(this)\r\n    }\r\n\r\n    private val connection = object : ServiceConnection {\r\n        override fun onServiceDisconnected(name: ComponentName?) {\r\n\r\n        }\r\n\r\n        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {\r\n            if (service is VideoService.VideoServiceBinder) {\r\n                playerView.player = service.getExoPlayerInstance()\r\n                bottomLeftPromtion.setCurrentItem(playerView.player?.currentPeriodIndex!!, true)\r\n                videoProgressbarRunnable()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt	(revision e248d5eb20c0e88c4198873a749b4af8708e517b)
-+++ app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt	(date 1621413365557)
-@@ -70,6 +70,7 @@
-     private lateinit var glide: RequestManager
-     private lateinit var contentViewModel: ContentViewModel
-     private lateinit var imageOptions: RequestOptions
-+    private lateinit var dbHelper : DatabaseHelperImpl
-     private var workManager = WorkManager.getInstance()
-     override fun onAttach(context: Context) {
-         super.onAttach(context)
-@@ -84,6 +85,7 @@
-         super.onActivityCreated(savedInstanceState)
-         callApiJob = Job()
-         sharedPreferences = context?.getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE)
-+        dbHelper = DatabaseHelperImpl(AdvertisementDatabase.invoke(mContext))
-         editor= sharedPreferences?.edit()
-         glide = Glide.with(App.instance)
-         imageOptions = RequestOptions().diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)
-@@ -184,6 +186,9 @@
-         }
-         launch {
-             while (isActive) {
-+                dbHelper.getAllList().forEach {
-+                    Log.d("DataBase","${it.advertisementId},${it.time_in_day},${it.media_type},${it.morning},${it.noon},${it.date}")
-+                }
-                 images[count].contentId?.let {
-                     viewModel.insertLog(it,DateHelper.instance.getCurrentDate(), DateHelper.instance.getCurrentPeriod(), Type.IMAGE.media_type)
-                 }
-@@ -207,6 +212,7 @@
-     @Subscribe(threadMode = ThreadMode.MAIN)
-     fun onEvent(animateVideo: AnimateVideo) {
-         try {
-+
-             launch {
-                 position = animateVideo.position
-                 bottomLeftPromtion.setCurrentItem(position, true)
-Index: app/src/main/java/com/routesme/vehicles/helper/DateHelper.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.routesme.vehicles.helper\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.util.Log\r\nimport com.routesme.vehicles.view.utils.Period\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport java.util.concurrent.TimeUnit\r\n\r\nclass DateHelper {\r\n    private val simpleDateFormat = SimpleDateFormat(\"yyMMdd\", Locale.ENGLISH)\r\n    companion object {\r\n\r\n        val instance = DateHelper()\r\n    }\r\n\r\n    private fun currentDate(): Date {\r\n        val calendar = Calendar.getInstance()\r\n        val hour = calendar.get(Calendar.HOUR_OF_DAY)\r\n        val minute = calendar.get(Calendar.MINUTE)\r\n        return parseDate(\"$hour:$minute\")\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    private fun parseDate(time: String) = SimpleDateFormat(\"HH:mm\").parse(time)\r\n\r\n    fun checkDate(from_date: Long): Boolean {\r\n        val diff = TimeUnit.DAYS.convert((getCurrentDate() - from_date), TimeUnit.MILLISECONDS)\r\n        Log.d(\"Diff\", \"${diff}\")\r\n        return diff > 0\r\n    }\r\n\r\n    fun getDateDifferenceByOne(from_date: Long): Boolean {\r\n\r\n        val diff = TimeUnit.DAYS.convert((getCurrentDate() - from_date), TimeUnit.MILLISECONDS)\r\n        return diff > 0\r\n\r\n    }\r\n\r\n    fun checkAccessTokenExp(from_date: Long): Boolean {\r\n\r\n        val diff = TimeUnit.DAYS.convert((getCurrentDate() - from_date), TimeUnit.MILLISECONDS)\r\n        return diff < 5\r\n\r\n    }\r\n\r\n    fun getCurrentPeriod(): Period {\r\n\r\n        if (isMorning()) {\r\n\r\n            return Period.MORNING\r\n\r\n        } else if (isNoon()) {\r\n\r\n            return Period.NOON\r\n\r\n        } else if (isEvening()) {\r\n\r\n            return Period.EVENING\r\n        } else {\r\n\r\n            return Period.NIGHT\r\n        }\r\n\r\n    }\r\n\r\n    fun getCurrentDate() = Calendar.getInstance().timeInMillis\r\n\r\n    fun getDateString(time: Long) : String = simpleDateFormat.format(time)\r\n\r\n    fun isMorning() = currentDate().after(parseDate(\"06:00\")) && currentDate().before(parseDate(\"11:59\"))\r\n    fun isNoon() = currentDate().after(parseDate(\"12:00\")) && currentDate().before(parseDate(\"16:59\"))\r\n    fun isEvening() = currentDate().after(parseDate(\"17:00\")) && currentDate().before(parseDate(\"23:59\"))\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/routesme/vehicles/helper/DateHelper.kt	(revision e248d5eb20c0e88c4198873a749b4af8708e517b)
-+++ app/src/main/java/com/routesme/vehicles/helper/DateHelper.kt	(date 1621413365521)
-@@ -8,7 +8,7 @@
- import java.util.concurrent.TimeUnit
- 
- class DateHelper {
--    private val simpleDateFormat = SimpleDateFormat("yyMMdd", Locale.ENGLISH)
-+    private val simpleDateFormat = SimpleDateFormat("yyMMddHHmm", Locale.ENGLISH)
-     companion object {
- 
-         val instance = DateHelper()
-Index: app/src/main/java/com/routesme/vehicles/App.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.routesme.vehicles\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.app.Application\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.work.BackoffPolicy\r\nimport androidx.work.Constraints\r\nimport androidx.work.NetworkType\r\nimport androidx.work.PeriodicWorkRequest\r\nimport com.google.firebase.analytics.FirebaseAnalytics\r\nimport com.routesme.vehicles.helper.DisplayManager\r\nimport com.routesme.vehicles.service.TrackingService\r\nimport com.routesme.vehicles.data.model.SignInCredentials\r\nimport com.routesme.vehicles.worker.TaskManager\r\nimport com.routesme.vehicles.helper.SharedPreferencesHelper\r\nimport com.routesme.vehicles.uplevels.Account\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport java.util.concurrent.TimeUnit\r\n\r\nclass App : Application() {\r\n    val account = Account()\r\n    private val displayManager = DisplayManager.instance\r\n    var signInCredentials: SignInCredentials? = null\r\n    var isNewLogin = false\r\n    var institutionId: String? = null\r\n    var taxiPlateNumber: String? = null\r\n    var vehicleId: String? = null\r\n    var institutionName: String? = null\r\n    var isRefreshActivityAlive: Boolean = false\r\n\r\n    companion object {\r\n        @get:Synchronized\r\n        var instance = App()\r\n        val constraint: Constraints = Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build()\r\n        val periodicWorkRequest: PeriodicWorkRequest = PeriodicWorkRequest.Builder(TaskManager::class.java, 1, TimeUnit.DAYS).setConstraints(constraint).setBackoffCriteria(BackoffPolicy.LINEAR, PeriodicWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS).build()\r\n    }\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        instance = this\r\n        logApplicationStartingPeriod(currentPeriod())\r\n        displayManager.setAlarm(this)\r\n        startTrackingService()\r\n    }\r\n\r\n    fun startTrackingService(){\r\n        val isRegistered = !getDeviceId().isNullOrEmpty()\r\n        if (isLocationPermissionsGranted() && isRegistered){\r\n            val intent = Intent(instance, TrackingService::class.java)\r\n            ContextCompat.startForegroundService(instance,intent)\r\n        }\r\n    }\r\n\r\n    private fun logApplicationStartingPeriod(timePeriod: TimePeriod) {\r\n        val params = Bundle()\r\n        params.putString(\"TimePeriod\", timePeriod.toString())\r\n        FirebaseAnalytics.getInstance(this).logEvent(\"application_starting_period\", params)\r\n    }\r\n    private fun currentPeriod(): TimePeriod {\r\n        val currentDate = currentDate()\r\n        return if (currentDate.after(parseDate(\"04:00\")) && currentDate.before(parseDate(\"12:00\"))) TimePeriod.Morning\r\n        else if (currentDate.after(parseDate(\"12:00\")) && currentDate.before(parseDate(\"17:00\"))) TimePeriod.Noon\r\n        else if (currentDate.after(parseDate(\"17:00\")) && currentDate.before(parseDate(\"24:00\"))) TimePeriod.Evening\r\n        else TimePeriod.Night\r\n    }\r\n    private fun currentDate(): Date {\r\n        val calendar = Calendar.getInstance()\r\n        val hour = calendar.get(Calendar.HOUR_OF_DAY)\r\n        val minute = calendar.get(Calendar.MINUTE)\r\n        return parseDate(\"$hour:$minute\")\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    private fun parseDate(time: String) = SimpleDateFormat(\"HH:mm\").parse(time)\r\n    enum class TimePeriod { Morning, Noon, Evening, Night }\r\n    private fun isLocationPermissionsGranted(): Boolean {\r\n        val permissions = arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION)\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            for (p in permissions) {\r\n                if (ContextCompat.checkSelfPermission(instance, p) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    private fun getDeviceId() =  getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE).getString(SharedPreferencesHelper.device_id,null)\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/routesme/vehicles/App.kt	(revision e248d5eb20c0e88c4198873a749b4af8708e517b)
-+++ app/src/main/java/com/routesme/vehicles/App.kt	(date 1621412863272)
-@@ -39,7 +39,7 @@
-         @get:Synchronized
-         var instance = App()
-         val constraint: Constraints = Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build()
--        val periodicWorkRequest: PeriodicWorkRequest = PeriodicWorkRequest.Builder(TaskManager::class.java, 1, TimeUnit.DAYS).setConstraints(constraint).setBackoffCriteria(BackoffPolicy.LINEAR, PeriodicWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS).build()
-+        val periodicWorkRequest: PeriodicWorkRequest = PeriodicWorkRequest.Builder(TaskManager::class.java, 4, TimeUnit.HOURS).setConstraints(constraint).setBackoffCriteria(BackoffPolicy.LINEAR, PeriodicWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS).build()
-     }
- 
-     override fun onCreate() {
-diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_3_17_2021_8_36_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_3_17_2021_8_36_AM__Default_Changelist_.xml
-diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_3_30_2021_9_40_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_3_30_2021_9_40_AM__Default_Changelist_.xml
-diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_2_10_2021_10_53_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_2_10_2021_10_53_AM__Default_Changelist_.xml
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_23_PM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_23_PM__Default_Changelist_.xml	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_23_PM__Default_Changelist_.xml	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_5_19_2021_12_23_PM_[Default_Changelist]" date="1621416228247" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_23_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 5/19/2021 12:23 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_25_PM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_25_PM_[Default_Changelist]/shelved.patch	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
+++ .idea/shelf/Uncommitted_changes_before_Checkout_at_5_19_2021_12_25_PM_[Default_Changelist]/shelved.patch	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
@@ -1,45 +0,0 @@
-Index: app/src/main/java/com/routesme/vehicles/helper/DateHelper.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.routesme.vehicles.helper\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.util.Log\r\nimport com.routesme.vehicles.view.utils.Period\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport java.util.concurrent.TimeUnit\r\n\r\nclass DateHelper {\r\n\r\n    companion object {\r\n\r\n        val instance = DateHelper()\r\n    }\r\n\r\n    private fun currentDate(): Date {\r\n        val calendar = Calendar.getInstance()\r\n        val hour = calendar.get(Calendar.HOUR_OF_DAY)\r\n        val minute = calendar.get(Calendar.MINUTE)\r\n        return parseDate(\"$hour:$minute\")\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    private fun parseDate(time: String) = SimpleDateFormat(\"HH:mm\").parse(time)\r\n\r\n    fun checkDate(from_date: Long): Boolean {\r\n        val diff = TimeUnit.DAYS.convert((getCurrentDate() - from_date), TimeUnit.MILLISECONDS)\r\n        Log.d(\"Diff\", \"${diff}\")\r\n        return diff > 0\r\n    }\r\n\r\n    fun getDateDifferenceByOne(from_date: Long): Boolean {\r\n\r\n        val diff = TimeUnit.DAYS.convert((getCurrentDate() - from_date), TimeUnit.MILLISECONDS)\r\n        return diff > 0\r\n\r\n    }\r\n\r\n    fun checkAccessTokenExp(from_date: Long): Boolean {\r\n\r\n        val diff = TimeUnit.DAYS.convert((getCurrentDate() - from_date), TimeUnit.MILLISECONDS)\r\n        return diff < 5\r\n\r\n    }\r\n\r\n    fun getCurrentPeriod(): Period {\r\n\r\n        if (isMorning()) {\r\n\r\n            return Period.MORNING\r\n\r\n        } else if (isNoon()) {\r\n\r\n            return Period.NOON\r\n\r\n        } else if (isEvening()) {\r\n\r\n            return Period.EVENING\r\n        } else {\r\n\r\n            return Period.NIGHT\r\n        }\r\n\r\n    }\r\n\r\n    fun getCurrentDate() = Calendar.getInstance().timeInMillis\r\n\r\n    fun isMorning() = currentDate().after(parseDate(\"06:00\")) && currentDate().before(parseDate(\"11:59\"))\r\n    fun isNoon() = currentDate().after(parseDate(\"12:00\")) && currentDate().before(parseDate(\"16:59\"))\r\n    fun isEvening() = currentDate().after(parseDate(\"17:00\")) && currentDate().before(parseDate(\"23:59\"))\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/routesme/vehicles/helper/DateHelper.kt	(revision 950929b7d058d582adfad5982712e8cf6a5cb474)
-+++ app/src/main/java/com/routesme/vehicles/helper/DateHelper.kt	(date 1621416228171)
-@@ -8,7 +8,7 @@
- import java.util.concurrent.TimeUnit
- 
- class DateHelper {
--
-+    private val simpleDateFormat = SimpleDateFormat("yyMMddHHmm", Locale.ENGLISH)
-     companion object {
- 
-         val instance = DateHelper()
-@@ -66,6 +66,8 @@
- 
-     fun getCurrentDate() = Calendar.getInstance().timeInMillis
- 
-+    fun getDateString(time: Long) : String = simpleDateFormat.format(time)
-+
-     fun isMorning() = currentDate().after(parseDate("06:00")) && currentDate().before(parseDate("11:59"))
-     fun isNoon() = currentDate().after(parseDate("12:00")) && currentDate().before(parseDate("16:59"))
-     fun isEvening() = currentDate().after(parseDate("17:00")) && currentDate().before(parseDate("23:59"))
-Index: app/src/main/java/com/routesme/vehicles/App.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.routesme.vehicles\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.app.Application\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.work.BackoffPolicy\r\nimport androidx.work.Constraints\r\nimport androidx.work.NetworkType\r\nimport androidx.work.PeriodicWorkRequest\r\nimport com.google.firebase.analytics.FirebaseAnalytics\r\nimport com.routesme.vehicles.helper.DisplayManager\r\nimport com.routesme.vehicles.service.TrackingService\r\nimport com.routesme.vehicles.data.model.SignInCredentials\r\nimport com.routesme.vehicles.worker.TaskManager\r\nimport com.routesme.vehicles.helper.SharedPreferencesHelper\r\nimport com.routesme.vehicles.uplevels.Account\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport java.util.concurrent.TimeUnit\r\n\r\nclass App : Application() {\r\n    val account = Account()\r\n    private val displayManager = DisplayManager.instance\r\n    var signInCredentials: SignInCredentials? = null\r\n    var isNewLogin = false\r\n    var institutionId: String? = null\r\n    var taxiPlateNumber: String? = null\r\n    var vehicleId: String? = null\r\n    var institutionName: String? = null\r\n    var isRefreshActivityAlive: Boolean = false\r\n\r\n    companion object {\r\n        @get:Synchronized\r\n        var instance = App()\r\n        val constraint: Constraints = Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build()\r\n        val periodicWorkRequest: PeriodicWorkRequest = PeriodicWorkRequest.Builder(TaskManager::class.java, 1, TimeUnit.DAYS).setConstraints(constraint).setBackoffCriteria(BackoffPolicy.LINEAR, PeriodicWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS).build()\r\n    }\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        instance = this\r\n        logApplicationStartingPeriod(currentPeriod())\r\n        displayManager.setAlarm(this)\r\n        startTrackingService()\r\n    }\r\n\r\n    fun startTrackingService(){\r\n        val isRegistered = !getDeviceId().isNullOrEmpty()\r\n        if (isLocationPermissionsGranted() && isRegistered){\r\n            val intent = Intent(instance, TrackingService::class.java)\r\n            ContextCompat.startForegroundService(instance,intent)\r\n        }\r\n    }\r\n\r\n    private fun logApplicationStartingPeriod(timePeriod: TimePeriod) {\r\n        val params = Bundle()\r\n        params.putString(\"TimePeriod\", timePeriod.toString())\r\n        FirebaseAnalytics.getInstance(this).logEvent(\"application_starting_period\", params)\r\n    }\r\n    private fun currentPeriod(): TimePeriod {\r\n        val currentDate = currentDate()\r\n        return if (currentDate.after(parseDate(\"04:00\")) && currentDate.before(parseDate(\"12:00\"))) TimePeriod.Morning\r\n        else if (currentDate.after(parseDate(\"12:00\")) && currentDate.before(parseDate(\"17:00\"))) TimePeriod.Noon\r\n        else if (currentDate.after(parseDate(\"17:00\")) && currentDate.before(parseDate(\"24:00\"))) TimePeriod.Evening\r\n        else TimePeriod.Night\r\n    }\r\n    private fun currentDate(): Date {\r\n        val calendar = Calendar.getInstance()\r\n        val hour = calendar.get(Calendar.HOUR_OF_DAY)\r\n        val minute = calendar.get(Calendar.MINUTE)\r\n        return parseDate(\"$hour:$minute\")\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    private fun parseDate(time: String) = SimpleDateFormat(\"HH:mm\").parse(time)\r\n    enum class TimePeriod { Morning, Noon, Evening, Night }\r\n    private fun isLocationPermissionsGranted(): Boolean {\r\n        val permissions = arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION)\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            for (p in permissions) {\r\n                if (ContextCompat.checkSelfPermission(instance, p) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    private fun getDeviceId() =  getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE).getString(SharedPreferencesHelper.device_id,null)\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/routesme/vehicles/App.kt	(revision 950929b7d058d582adfad5982712e8cf6a5cb474)
-+++ app/src/main/java/com/routesme/vehicles/App.kt	(date 1621416228190)
-@@ -39,7 +39,7 @@
-         @get:Synchronized
-         var instance = App()
-         val constraint: Constraints = Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build()
--        val periodicWorkRequest: PeriodicWorkRequest = PeriodicWorkRequest.Builder(TaskManager::class.java, 1, TimeUnit.DAYS).setConstraints(constraint).setBackoffCriteria(BackoffPolicy.LINEAR, PeriodicWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS).build()
-+        val periodicWorkRequest: PeriodicWorkRequest = PeriodicWorkRequest.Builder(TaskManager::class.java, 4, TimeUnit.HOURS).setConstraints(constraint).setBackoffCriteria(BackoffPolicy.LINEAR, PeriodicWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS).build()
-     }
- 
-     override fun onCreate() {
Index: app/src/taxi/java/com/routesme/vehicles/view/activity/HomeActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.vehicles.view.activity\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.ComponentName\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.content.pm.PackageManager\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.activity.viewModels\r\nimport androidx.fragment.app.commit\r\nimport androidx.fragment.app.replace\r\nimport androidx.lifecycle.Observer\r\nimport com.google.android.exoplayer2.MediaItem\r\nimport com.google.android.exoplayer2.Player\r\nimport com.google.android.exoplayer2.SimpleExoPlayer\r\nimport com.google.android.exoplayer2.source.MediaSource\r\nimport com.google.android.exoplayer2.source.ProgressiveMediaSource\r\nimport com.google.android.exoplayer2.upstream.DataSpec\r\nimport com.google.android.exoplayer2.upstream.RawResourceDataSource\r\nimport com.routesme.vehicles.BuildConfig\r\nimport com.routesme.vehicles.data.model.IModeChanging\r\nimport com.routesme.vehicles.data.model.SubmitApplicationVersionCredentials\r\nimport com.routesme.vehicles.data.model.SubmitApplicationVersionResponse\r\nimport com.routesme.vehicles.helper.*\r\nimport com.routesme.vehicles.view.fragment.ContentFragment\r\nimport com.routesme.vehicles.viewmodel.SubmitApplicationVersionViewModel\r\nimport com.routesme.vehicles.view.events.DemoVideo\r\nimport com.routesme.vehicles.R\r\nimport com.routesme.vehicles.helper.SharedPreferencesHelper\r\nimport kotlinx.android.synthetic.taxi.home_screen.*\r\nimport kotlinx.coroutines.*\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\n\r\nclass HomeActivity : com.routesme.vehicles.view.activity.PermissionsActivity(), IModeChanging,CoroutineScope by MainScope(){\r\n    private var sharedPreferences: SharedPreferences? = null\r\n    private var editor: SharedPreferences.Editor? = null\r\n    private val helper = HomeScreenHelper(this)\r\n    private var isHotspotAlive = false\r\n    private var pressedTime: Long = 0\r\n    private lateinit var mView: View\r\n    private var clickTimes = 0\r\n    private var player : SimpleExoPlayer?=null\r\n    private  var from_date:String?=null\r\n    private  var deviceId:String?=null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        DisplayManager.instance.registerActivity(this)\r\n        if (DisplayManager.instance.isAnteMeridiem()) {\r\n            DisplayManager.instance.currentMode = Mode.Light\r\n            setTheme(R.style.FullScreen_Light_Mode)\r\n            ScreenBrightness.instance.setBrightnessValue(this, 80)\r\n        } else {\r\n            DisplayManager.instance.currentMode = Mode.Dark\r\n            setTheme(R.style.FullScreen_Dark_Mode)\r\n            ScreenBrightness.instance.setBrightnessValue(this, 20)\r\n        }\r\n        setContentView(R.layout.home_screen)\r\n        sharedPreferences = getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE)\r\n        editor= sharedPreferences?.edit()\r\n        from_date = sharedPreferences?.getString(SharedPreferencesHelper.from_date,null)\r\n        deviceId = sharedPreferences?.getString(SharedPreferencesHelper.device_id, null)\r\n        submitApplicationVersion()\r\n        launch {initializePlayer()}\r\n        turnOnHotspot()\r\n        openPatternBtn.setOnClickListener { openPattern() }\r\n        helper.requestRuntimePermissions()\r\n        addFragments()\r\n        setSystemUiVisibility()\r\n    }\r\n\r\n    private fun setSystemUiVisibility() {\r\n\r\n        window.decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                or View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY)\r\n    }\r\n\r\n    @SuppressLint(\"CommitPrefEdits\")\r\n    private fun submitApplicationVersion() {\r\n        val submittedVersion = sharedPreferences?.getString(SharedPreferencesHelper.submitted_version, null)\r\n        val currentVersion = \"${BuildConfig.VERSION_NAME}.${BuildConfig.VERSION_CODE}\"\r\n        if (currentVersion.isNotEmpty()){\r\n            if (submittedVersion.isNullOrEmpty() || submittedVersion != currentVersion){\r\n                val packageName = BuildConfig.APPLICATION_ID\r\n                deviceId?.let {\r\n                    val submitApplicationVersionCredentials = SubmitApplicationVersionCredentials(packageName, currentVersion)\r\n                    sendCurrentVersionToServer(it, submitApplicationVersionCredentials)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun sendCurrentVersionToServer(deviceId: String, submitApplicationVersionCredentials: SubmitApplicationVersionCredentials){\r\n        val submitApplicationVersionViewModel: SubmitApplicationVersionViewModel by viewModels()\r\n        submitApplicationVersionViewModel.submitApplicationVersion(deviceId, submitApplicationVersionCredentials, this).observe(this, Observer<SubmitApplicationVersionResponse> {\r\n            if (it != null) {\r\n                if (it.isSuccess) {\r\n\r\n                    editor?.putString(SharedPreferencesHelper.submitted_version, submitApplicationVersionCredentials.versions)?.apply()\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private suspend fun initializePlayer() {\r\n        player = SimpleExoPlayer.Builder(demoVideoPlayer.context).build()\r\n        demoVideoPlayer.player = player\r\n        val mediaSource = buildRawMediaSource()\r\n        withContext(Dispatchers.Main){\r\n            mediaSource?.let {\r\n                player?.apply {\r\n                    setMediaSource(it)\r\n                    prepare()\r\n                    repeatMode = Player.REPEAT_MODE_ONE\r\n                    playWhenReady = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private suspend fun buildRawMediaSource(): MediaSource? {\r\n        return withContext(Dispatchers.Default){\r\n            val rawDataSource = RawResourceDataSource(this@HomeActivity)\r\n            rawDataSource.open(DataSpec(RawResourceDataSource.buildRawResourceUri(R.raw.offline_video)))\r\n            val mediaItem = MediaItem.fromUri(rawDataSource.uri!!)\r\n            rawDataSource.close()\r\n            val mediaSource = ProgressiveMediaSource.Factory { rawDataSource }.createMediaSource(mediaItem)\r\n            return@withContext mediaSource\r\n        }\r\n    }\r\n    private fun addFragments() {\r\n        supportFragmentManager.commit {\r\n            replace<ContentFragment>(R.id.contentFragment_container)\r\n        }\r\n    }\r\n\r\n    private fun removeFragments() {\r\n        val contentFragment = supportFragmentManager.findFragmentByTag(\"Content_Fragment\")\r\n        contentFragment?.let { supportFragmentManager.beginTransaction().remove(it).commit() }\r\n    }\r\n    override fun onPermissionsOkay() {}\r\n\r\n    private fun openPattern() {\r\n        clickTimes++\r\n        if (pressedTime + 1000 > System.currentTimeMillis() && clickTimes >= 10) {\r\n            helper.showAdminVerificationDialog()\r\n            clickTimes = 0\r\n        }\r\n        pressedTime = System.currentTimeMillis()\r\n    }\r\n    override fun onModeChange() {\r\n        removeFragments()\r\n        recreate()\r\n    }\r\n\r\n    private fun turnOnHotspot() {\r\n\r\n        val intent = Intent(getString(R.string.intent_action_turnon))\r\n        sendImplicitBroadcast(intent)\r\n        isHotspotAlive = true\r\n    }\r\n\r\n    private fun turnOffHotspot() {\r\n\r\n        val intent = Intent(getString(R.string.intent_action_turnoff))\r\n        sendImplicitBroadcast(intent)\r\n        isHotspotAlive = false\r\n    }\r\n    private fun sendImplicitBroadcast(i: Intent) {\r\n        val pm: PackageManager = this.packageManager\r\n        val matches = pm.queryBroadcastReceivers(i, 0)\r\n        for (resolveInfo in matches) {\r\n            val explicit = Intent(i)\r\n            val cn = ComponentName(resolveInfo.activityInfo.applicationInfo.packageName, resolveInfo.activityInfo.name)\r\n            explicit.component = cn\r\n            this.sendBroadcast(explicit)\r\n        }\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    fun onEvent(demoVideo: DemoVideo){\r\n        try {\r\n                if(demoVideo.isPlay){\r\n                    textViewError.visibility = View.VISIBLE\r\n                    textViewError.text = demoVideo.errorMessage\r\n                    activityVideoCover.visibility = View.VISIBLE\r\n                    demoVideoPlayer.visibility = View.VISIBLE\r\n                    playVideo()\r\n                }else {\r\n                    textViewError.visibility = View.GONE\r\n                    activityVideoCover.visibility = View.GONE\r\n                    demoVideoPlayer.visibility = View.GONE\r\n                    if(player?.isPlaying!!) stopVideo()\r\n\r\n\r\n\r\n\r\n                }\r\n        } catch (e: IllegalArgumentException) {\r\n            e.printStackTrace()\r\n        }\r\n\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        if(player !=null){\r\n            player?.release()\r\n            player = null\r\n        }\r\n        turnOffHotspot()\r\n        removeFragments()\r\n        if (DisplayManager.instance.wasRegistered(this)) DisplayManager.instance.unregisterActivity(this)\r\n        cancel()\r\n    }\r\n    override fun onStart() {\r\n        Log.d(\"LifeCycle\",\"onStart\")\r\n        EventBus.getDefault().register(this)\r\n        super.onStart()\r\n    }\r\n\r\n    override fun onStop() {\r\n        EventBus.getDefault().unregister(this)\r\n        super.onStop()\r\n    }\r\n\r\n    fun playVideo(){\r\n\r\n        player?.play()\r\n\r\n    }\r\n\r\n    fun stopVideo(){\r\n\r\n        player?.pause()\r\n\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/taxi/java/com/routesme/vehicles/view/activity/HomeActivity.kt	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
+++ app/src/taxi/java/com/routesme/vehicles/view/activity/HomeActivity.kt	(date 1621938047104)
@@ -39,7 +39,7 @@
 class HomeActivity : com.routesme.vehicles.view.activity.PermissionsActivity(), IModeChanging,CoroutineScope by MainScope(){
     private var sharedPreferences: SharedPreferences? = null
     private var editor: SharedPreferences.Editor? = null
-    private val helper = HomeScreenHelper(this)
+    private val helper by lazy { HomeScreenHelper(this) }
     private var isHotspotAlive = false
     private var pressedTime: Long = 0
     private lateinit var mView: View
@@ -164,7 +164,6 @@
     }
 
     private fun turnOnHotspot() {
-
         val intent = Intent(getString(R.string.intent_action_turnon))
         sendImplicitBroadcast(intent)
         isHotspotAlive = true
Index: app/src/main/java/com/routesme/vehicles/room/viewmodel/AdvertisementViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.vehicles.room.viewmodel\r\n\r\nimport android.util.Log\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.routesme.vehicles.helper.DateHelper\r\nimport com.routesme.vehicles.room.ResponseBody\r\nimport com.routesme.vehicles.room.entity.AdvertisementTracking\r\nimport com.routesme.vehicles.room.helper.DatabaseHelper\r\nimport com.routesme.vehicles.view.utils.Period\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\n\r\nclass RoomDBViewModel(private val dbHelper: DatabaseHelper) : ViewModel() {\r\n    private val MIN = 100000000\r\n    \r\n    private val analyticsListLiveData = MutableLiveData<ResponseBody<List<AdvertisementTracking>>>()\r\n    private val analyticsListAllLiveData = MutableLiveData<ResponseBody<List<AdvertisementTracking>>>()\r\n    private val deleteTableLiveData = MutableLiveData<ResponseBody<Int>>()\r\n    private val deleteAllTableLiveData = MutableLiveData<ResponseBody<Int>>()\r\n\r\n    fun insertLog(advertisementId: String, resourceNumber: String, timeStamp: Long, period: Period, type: String) {\r\n        val currentDate = DateHelper.instance.getDateString(timeStamp)\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            try {\r\n                var analysisRecord = dbHelper.getItem(resourceNumber, currentDate)\r\n\r\n                if (analysisRecord != null) {\r\n                    update(analysisRecord.id, period)\r\n                } else {\r\n                    dbHelper.insertAdvertisement(AdvertisementTracking(advertisementId = advertisementId, resourceNumber = resourceNumber, date = timeStamp, morning = 0, noon = 0, evening = 0, night = 0, time_in_day = currentDate, media_type = type))\r\n                    var lastItem = dbHelper.getLastItem(resourceNumber, currentDate)\r\n                    update(lastItem.id, period)\r\n                }\r\n\r\n            } catch (e: Exception) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    fun update(id: Int, period: Period) {\r\n        viewModelScope.launch {\r\n            try {\r\n                when (period) {\r\n                    Period.MORNING -> dbHelper.updateSlotMorning(id)\r\n                    Period.NOON -> dbHelper.updateSlotNoon(id)\r\n                    Period.EVENING -> dbHelper.updateSlotEvening(id)\r\n                    Period.NIGHT -> dbHelper.updateSlotNight(id)\r\n                }\r\n            } catch (e: Exception) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAllList(): LiveData<ResponseBody<List<AdvertisementTracking>>> {\r\n\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val getAllList = dbHelper.getAllList()\r\n            analyticsListAllLiveData.postValue(ResponseBody.success(getAllList))\r\n        }\r\n        return analyticsListAllLiveData\r\n    }\r\n\r\n\r\n    fun deleteAllData(): LiveData<ResponseBody<Int>> {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val deleteData = dbHelper.deleteAllTable()\r\n            deleteAllTableLiveData.postValue(ResponseBody.success(deleteData))\r\n        }\r\n        return deleteAllTableLiveData\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/routesme/vehicles/room/viewmodel/AdvertisementViewModel.kt	(revision 69baf667b4e4855f2ffd6bdc15178afd18dcd237)
+++ app/src/main/java/com/routesme/vehicles/room/viewmodel/AdvertisementViewModel.kt	(date 1621934988470)
@@ -1,6 +1,5 @@
 package com.routesme.vehicles.room.viewmodel
 
-import android.util.Log
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.ViewModel
@@ -15,7 +14,6 @@
 
 class RoomDBViewModel(private val dbHelper: DatabaseHelper) : ViewModel() {
     private val MIN = 100000000
-    
     private val analyticsListLiveData = MutableLiveData<ResponseBody<List<AdvertisementTracking>>>()
     private val analyticsListAllLiveData = MutableLiveData<ResponseBody<List<AdvertisementTracking>>>()
     private val deleteTableLiveData = MutableLiveData<ResponseBody<Int>>()
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_3_17_2021_8_36_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_3_17_2021_8_36_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_3_30_2021_9_40_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_3_30_2021_9_40_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_2_10_2021_10_53_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_2_10_2021_10_53_AM__Default_Changelist_.xml
