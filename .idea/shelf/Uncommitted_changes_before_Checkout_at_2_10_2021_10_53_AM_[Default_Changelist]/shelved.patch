Index: app/src/main/java/com/routesme/taxi/MVVM/View/fragment/ContentFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.taxi.MVVM.View.fragment\r\n\r\nimport android.animation.ObjectAnimator\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.*\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.os.IBinder\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.animation.AccelerateDecelerateInterpolator\r\nimport android.view.animation.Animation\r\nimport android.view.animation.AnimationUtils\r\nimport android.widget.ImageView\r\nimport androidx.activity.viewModels\r\nimport androidx.core.animation.addListener\r\nimport androidx.core.graphics.ColorUtils\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.work.WorkManager\r\nimport carbon.widget.RelativeLayout\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\r\nimport com.google.android.exoplayer2.*\r\nimport com.google.gson.JsonArray\r\nimport com.google.gson.JsonObject\r\nimport com.routesme.taxi.Class.*\r\nimport com.routesme.taxi.Class.SideFragmentAdapter.SideFragmentAdapter\r\nimport com.routesme.taxi.ItemAnimator\r\nimport com.routesme.taxi.MVVM.Model.*\r\nimport com.routesme.taxi.MVVM.ViewModel.ContentViewModel\r\nimport com.routesme.taxi.MVVM.events.AnimateVideo\r\nimport com.routesme.taxi.MVVM.events.DemoVideo\r\nimport com.routesme.taxi.MVVM.events.PromotionEvent\r\nimport com.routesme.taxi.MVVM.service.VideoService\r\nimport com.routesme.taxi.R\r\nimport com.routesme.taxi.database.ResponseBody\r\nimport com.routesme.taxi.database.database.AdvertisementDatabase\r\nimport com.routesme.taxi.database.entity.AdvertisementTracking\r\nimport com.routesme.taxi.database.factory.ViewModelFactory\r\nimport com.routesme.taxi.database.helper.DatabaseHelperImpl\r\nimport com.routesme.taxi.database.viewmodel.RoomDBViewModel\r\nimport com.routesme.taxi.helper.SharedPreferencesHelper\r\nimport com.routesme.taxi.uplevels.App\r\nimport com.routesme.taxi.utils.Type\r\nimport dmax.dialog.SpotsDialog\r\nimport kotlinx.android.synthetic.main.content_fragment.*\r\nimport kotlinx.android.synthetic.main.content_fragment.view.*\r\nimport kotlinx.android.synthetic.main.side_menu_fragment.*\r\nimport kotlinx.coroutines.*\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.io.IOException\r\nimport java.lang.Exception\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\nclass ContentFragment :Fragment(),CoroutineScope by MainScope(){\r\n\r\n    private lateinit var mContext: Context\r\n    private var sharedPreferences: SharedPreferences? = null\r\n    private var editor: SharedPreferences.Editor? = null\r\n    private var device_id : String = \"\"\r\n    private val SEC:Long = 300\r\n    private val MIL:Long = 1000\r\n    private var dialog: SpotsDialog? = null\r\n    private var isAlive = false\r\n    private var videoShadow: RelativeLayout? = null\r\n    private lateinit var  callApiJob : Job\r\n    private lateinit  var animatorVideo:ObjectAnimator\r\n    private lateinit  var animatorImage:ObjectAnimator\r\n    private lateinit var viewModel: RoomDBViewModel\r\n    private lateinit var zoomOut:Animation\r\n    private lateinit var zoomIn:Animation\r\n    private var mVideoList:List<Data>?=null\r\n    private var screenWidth:Int?=null\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        mContext = context\r\n    }\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view : View = inflater.inflate(R.layout.content_fragment, container, false)\r\n        return view\r\n    }\r\n\r\n    private val connection = object : ServiceConnection {\r\n        override fun onServiceDisconnected(name: ComponentName?) {\r\n\r\n        }\r\n        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {\r\n            if (service is VideoService.VideoServiceBinder) {\r\n                playerView.player = service.getExoPlayerInstance()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        sharedPreferences = context?.getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE)\r\n        editor= sharedPreferences?.edit()\r\n        device_id = sharedPreferences?.getString(SharedPreferencesHelper.device_id, null)!!\r\n        callApiJob = Job()\r\n        viewModel =  ViewModelProvider(this,ViewModelFactory(DatabaseHelperImpl(AdvertisementDatabase.invoke(mContext)))).get(RoomDBViewModel::class.java)\r\n        zoomOut = AnimationUtils.loadAnimation(context, R.anim.background_zoom_out)\r\n        zoomIn = AnimationUtils.loadAnimation(context, R.anim.background_zoom_in)\r\n        screenWidth = DisplayManager.instance.getDisplayWidth(mContext)\r\n        WorkManager.getInstance().enqueue(App.periodicWorkRequest);\r\n        observeTaskManager()\r\n        fetchContent()\r\n    }\r\n\r\n    private fun observeTaskManager(){\r\n\r\n        WorkManager.getInstance().getWorkInfoByIdLiveData(App.periodicWorkRequest.id)\r\n                .observe(viewLifecycleOwner, Observer { workInfo ->\r\n                    val status = workInfo.state.name\r\n                    if(status == \"RUNNING\"){\r\n\r\n                        observeAnalytics()\r\n\r\n                    }\r\n\r\n                })\r\n    }\r\n\r\n    private fun observeAnalytics(){\r\n\r\n        viewModel.getReport(DateHelper.instance.getCurrentDate()).observe(viewLifecycleOwner, Observer {\r\n\r\n            when(it.status){\r\n\r\n                ResponseBody.Status.SUCCESS -> {\r\n\r\n                    it.data?.let {list->\r\n                        val postReportViewModel: ContentViewModel by viewModels()\r\n                        device_id?.let {deviceId->\r\n\r\n                            postReportViewModel.postReport(mContext,getJsonArray(list),deviceId).observe(viewLifecycleOwner , Observer<ReportResponse> {\r\n                                if(it.isSuccess){\r\n                                    observeDeleteTable()\r\n\r\n                                }\r\n                            })\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n                ResponseBody.Status.ERROR -> {\r\n\r\n                    Log.d(\"TaskManagerPeriodic\",\"No Data Found\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun observeDeleteTable(){\r\n\r\n        viewModel.deleteTable(DateHelper.instance.getCurrentDate()).observe(viewLifecycleOwner, Observer {\r\n            when(it.status){\r\n                ResponseBody.Status.SUCCESS ->{\r\n\r\n                    editor?.putString(SharedPreferencesHelper.from_date, DateHelper.instance.getCurrentDate().toString())\r\n                    editor?.commit()}\r\n                ResponseBody.Status.ERROR ->{\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun getJsonArray(list: List<AdvertisementTracking>): JsonArray {\r\n        val jsonArray = JsonArray()\r\n        list?.forEach {\r\n            val jsonObject = JsonObject().apply{\r\n                addProperty(\"date\",it.date/1000)\r\n                addProperty(\"advertisementId\",it.advertisementId)\r\n                addProperty(\"mediaType\",it.media_type)\r\n                add(\"slots\",getJsonArrayOfSlot(it.morning,it.noon,it.evening,it.night))\r\n            }\r\n            jsonArray.add(jsonObject)\r\n        }\r\n\r\n        return jsonArray\r\n\r\n    }\r\n\r\n    private fun getJsonArrayOfSlot(morning:Int,noon:Int,evening:Int,night:Int): JsonArray {\r\n        val jsonObject = JsonObject()\r\n        val jsonArray = JsonArray()\r\n        if(morning != 0){\r\n            jsonObject.addProperty(\"period\",\"mo\")\r\n            jsonObject.addProperty(\"value\",morning)\r\n        }\r\n        if(noon != 0){\r\n            jsonObject.addProperty(\"period\",\"no\")\r\n            jsonObject.addProperty(\"value\",noon)\r\n        }\r\n        if(evening != 0){\r\n            jsonObject.addProperty(\"period\",\"ev\")\r\n            jsonObject.addProperty(\"value\",evening)\r\n        }\r\n        if(night != 0){\r\n            jsonObject.addProperty(\"period\",\"ni\")\r\n            jsonObject.addProperty(\"value\",night)\r\n        }\r\n        jsonArray.add(jsonObject)\r\n        return jsonArray\r\n\r\n    }\r\n\r\n    private fun fetchContent(){\r\n\r\n        val contentViewModel: ContentViewModel by viewModels()\r\n\r\n                contentViewModel.getContent(1,100,mContext).observe(viewLifecycleOwner , Observer<ContentResponse> {\r\n                    dialog?.dismiss()\r\n                    if (it != null) {\r\n                        if (it.isSuccess) {\r\n                            val images = it.imageList.toList()\r\n                            val videos = it.videoList.toList()\r\n                            if (images.isNullOrEmpty() && videos.isNullOrEmpty()){\r\n                                startThread(getString(R.string.no_data_found))\r\n                                return@Observer\r\n                            }else{\r\n                                if(isAlive) removeThread()\r\n                                advertisementsImageView.apply {\r\n                                    cameraDistance = 12000f\r\n                                    pivotX = advertisementsImageView.height * 0.7f\r\n                                    pivotY = advertisementsImageView.height / 0.7f\r\n                                }\r\n                                Advertisement_Video_CardView.apply {\r\n                                    cameraDistance = 12000f\r\n                                    pivotX = 0.0f\r\n                                    pivotY = Advertisement_Video_CardView.height / 0.7f\r\n                                }\r\n                                if (!images.isNullOrEmpty())setUpImage(images)\r\n                                launch {\r\n                                    setImageAnimation(advertisementsImageView,advertisementsImageView2)\r\n                                    setAnimation(Advertisement_Video_CardView,bgImage)\r\n                                    mVideoList = videos\r\n                                    startVideoService(videos)\r\n                                }\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            if (!it.mResponseErrors?.errors.isNullOrEmpty()) {\r\n                                it.mResponseErrors?.errors?.let {\r\n\r\n                                    startThread(getString(R.string.no_data_found))\r\n                                    //errors -> displayErrors(errors)\r\n                                }\r\n                            } else if (it.mThrowable != null) {\r\n\r\n                                if (it.mThrowable is IOException) {\r\n                                    startThread(getString(R.string.network_Issue))\r\n\r\n                                } else {\r\n                                    startThread(getString(R.string.conversion_Issue))\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        startThread(getString(R.string.unknown_error))\r\n\r\n                    }\r\n                })\r\n    }\r\n\r\n    private fun startThread(errorMessage:String){\r\n        isAlive = true\r\n        EventBus.getDefault().post(DemoVideo(true,errorMessage))\r\n            CoroutineScope(Dispatchers.Main + callApiJob).launch {\r\n                delay(SEC*MIL)\r\n                fetchContent()\r\n\r\n            }\r\n    }\r\n\r\n    private fun removeThread(){\r\n        if(callApiJob.isActive) callApiJob.cancelChildren()\r\n        isAlive=false\r\n        EventBus.getDefault().post(DemoVideo(false,\"\"))\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    fun onEvent(data: Data){\r\n        if (data.type ==  ContentType.Video.value){\r\n            launch {\r\n                changeVideoCardColor(data.tintColor)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    fun onEvent(data: String){\r\n        launch {\r\n            videoProgressbarRunnable()\r\n        }\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    fun onEvent(animateVideo: AnimateVideo){\r\n        try {\r\n            launch {\r\n                animatorVideo.start()\r\n                bgImage.startAnimation(zoomOut)\r\n                Advertisement_Video_CardView.bringToFront()\r\n            }\r\n\r\n        }catch (e:Exception){\r\n\r\n        }\r\n    }\r\n\r\n\r\n    private suspend fun changeVideoCardColor(tintColor: Int?) {\r\n        val color = ThemeColor(tintColor).getColor()\r\n        val lowOpacityColor = ColorUtils.setAlphaComponent(color,33)\r\n        videoShadow?.setElevationShadowColor(color)\r\n        videoRingProgressBar?.let {\r\n            it.ringColor = lowOpacityColor\r\n            it.ringProgressColor = color\r\n        }\r\n    }\r\n\r\n\r\n    fun setUpImage(images: List<Data>){\r\n        var currentImageIndex = 0\r\n        var firstTime = false\r\n        val glide = Glide.with(mContext)\r\n        launch{\r\n            while(isActive) {\r\n                if (currentImageIndex < images.size) {\r\n                    if (currentImageIndex > 0){\r\n                        val previousImageIndex = currentImageIndex - 1\r\n                        val previousUri = Uri.parse(images[previousImageIndex].url)\r\n                        glide.load(previousUri).error(R.drawable.empty_promotion).diskCacheStrategy(DiskCacheStrategy.NONE).into(advertisementsImageView)\r\n                    }\r\n                    val newUri = Uri.parse(images[currentImageIndex].url)\r\n                    images[currentImageIndex].contentId?.let {\r\n                        viewModel.insertLog(it, DateHelper.instance.getCurrentDate(), DateHelper.instance.getCurrentPeriod(),Type.IMAGE.media_type)\r\n                    }\r\n                    glide.load(newUri).error(R.drawable.empty_promotion).diskCacheStrategy(DiskCacheStrategy.NONE).into(advertisementsImageView2)\r\n                    if (firstTime || currentImageIndex != 0){\r\n                        firstTime = true\r\n                        launch {\r\n\r\n                            advertisementsImageView2.startAnimation(zoomIn)\r\n                            advertisementsImageView.bringToFront()\r\n                            animatorImage.start()\r\n\r\n                        }\r\n\r\n                    }\r\n                    currentImageIndex++\r\n                    if (currentImageIndex >= images.size) {\r\n                        currentImageIndex = 0\r\n                    }\r\n                    EventBus.getDefault().post(PromotionEvent(images[currentImageIndex]))\r\n                }\r\n\r\n                delay(15 * 1000)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private suspend fun videoProgressbarRunnable() {\r\n        launch{\r\n            while (isActive){\r\n                val current = (playerView.player?.currentPosition)!!.toInt()\r\n                val progress = current * 100 / (playerView.player?.duration)!!.toInt()\r\n                videoRingProgressBar?.progress = progress\r\n                delay(1000)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun setAnimation(playerView: RelativeLayout, bgImageView: RelativeLayout){\r\n        animatorVideo = ObjectAnimator.ofFloat(playerView, \"rotationX\", -180f, 0f)\r\n        animatorVideo.apply {\r\n            setDuration(1500)\r\n            AccelerateDecelerateInterpolator()\r\n        }\r\n        /*val zoomout: Animation = AnimationUtils.loadAnimation(context, R.anim.background_zoom_out)\r\n        bgImageView.startAnimation(zoomout)\r\n        playerView.bringToFront()*/\r\n    }\r\n\r\n\r\n    private fun setImageAnimation(imageView: ImageView, imageView2: ImageView){\r\n\r\n        animatorImage = ObjectAnimator.ofFloat(imageView, \"rotationY\", 0f, 90f)\r\n        animatorImage.apply {\r\n            setDuration(1500)\r\n            AccelerateDecelerateInterpolator()\r\n            start()\r\n        }\r\n        /*val zoomIn: Animation = AnimationUtils.loadAnimation(context, R.anim.background_zoom_in)\r\n        imageView2.startAnimation(zoomIn)\r\n        imageView.bringToFront()*/\r\n\r\n    }\r\n\r\n    private fun startVideoService(list:List<Data>){\r\n        val intent = Intent(mContext, VideoService::class.java)\r\n        intent.putExtra(\"array\", list as ArrayList<Data>)\r\n        mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE)\r\n\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        cancel()\r\n        callApiJob.cancel()\r\n        AdvertisementsHelper.instance.deleteCache()\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        EventBus.getDefault().register(this)\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        EventBus.getDefault().unregister(this)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/routesme/taxi/MVVM/View/fragment/ContentFragment.kt	(revision 4ff5c82dae4a45c66a66a45e753cc707cb49071e)
+++ app/src/main/java/com/routesme/taxi/MVVM/View/fragment/ContentFragment.kt	(date 1612942289095)
@@ -4,20 +4,25 @@
 import android.annotation.SuppressLint
 import android.app.Activity
 import android.content.*
+import android.graphics.Color
 import android.net.Uri
 import android.os.Bundle
 import android.os.IBinder
+import android.text.SpannedString
 import android.util.Log
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
 import android.view.animation.AccelerateDecelerateInterpolator
+import android.view.animation.AccelerateInterpolator
 import android.view.animation.Animation
 import android.view.animation.AnimationUtils
 import android.widget.ImageView
-import androidx.activity.viewModels
 import androidx.core.animation.addListener
 import androidx.core.graphics.ColorUtils
+import androidx.core.text.bold
+import androidx.core.text.buildSpannedString
+import androidx.core.text.color
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.viewModels
 import androidx.lifecycle.Observer
@@ -26,12 +31,12 @@
 import carbon.widget.RelativeLayout
 import com.bumptech.glide.Glide
 import com.bumptech.glide.load.engine.DiskCacheStrategy
-import com.google.android.exoplayer2.*
 import com.google.gson.JsonArray
 import com.google.gson.JsonObject
+import com.google.zxing.BarcodeFormat
 import com.routesme.taxi.Class.*
-import com.routesme.taxi.Class.SideFragmentAdapter.SideFragmentAdapter
-import com.routesme.taxi.ItemAnimator
+import com.routesme.taxi.Class.SideFragmentAdapter.getSubtitle
+import com.routesme.taxi.Class.SideFragmentAdapter.imageOptions
 import com.routesme.taxi.MVVM.Model.*
 import com.routesme.taxi.MVVM.ViewModel.ContentViewModel
 import com.routesme.taxi.MVVM.events.AnimateVideo
@@ -49,10 +54,11 @@
 import com.routesme.taxi.uplevels.App
 import com.routesme.taxi.utils.Type
 import dmax.dialog.SpotsDialog
+import kotlinx.android.synthetic.main.bottom_bar_advertisement.*
 import kotlinx.android.synthetic.main.content_fragment.*
 import kotlinx.android.synthetic.main.content_fragment.view.*
-import kotlinx.android.synthetic.main.side_menu_fragment.*
 import kotlinx.coroutines.*
+import net.codecision.glidebarcode.model.Barcode
 import org.greenrobot.eventbus.EventBus
 import org.greenrobot.eventbus.Subscribe
 import org.greenrobot.eventbus.ThreadMode
@@ -73,12 +79,12 @@
     private var isAlive = false
     private var videoShadow: RelativeLayout? = null
     private lateinit var  callApiJob : Job
-    private lateinit  var animatorVideo:ObjectAnimator
-    private lateinit  var animatorImage:ObjectAnimator
     private lateinit var viewModel: RoomDBViewModel
     private lateinit var zoomOut:Animation
     private lateinit var zoomIn:Animation
     private var mVideoList:List<Data>?=null
+    private val animatorHelper = AnimatorHelper()
+    private val dateOperations = DateOperations.instance
     private var screenWidth:Int?=null
     override fun onAttach(context: Context) {
         super.onAttach(context)
@@ -115,6 +121,7 @@
         WorkManager.getInstance().enqueue(App.periodicWorkRequest);
         observeTaskManager()
         fetchContent()
+        setTime()
     }
 
     private fun observeTaskManager(){
@@ -131,6 +138,18 @@
                 })
     }
 
+    @SuppressLint("SetTextI18n")
+    private fun setTime() {
+        launch {
+            while (isActive){
+                val date = Date()
+                textViewTime.text = dateOperations.timeClock(date)
+                textViewDayAndMonth.text = "${dateOperations.dayOfWeek(date)}\n ${dateOperations.date(date)}"
+                delay(60 * 1000)
+            }
+        }
+    }
+
     private fun observeAnalytics(){
 
         viewModel.getReport(DateHelper.instance.getCurrentDate()).observe(viewLifecycleOwner, Observer {
@@ -242,10 +261,23 @@
                                     pivotX = 0.0f
                                     pivotY = Advertisement_Video_CardView.height / 0.7f
                                 }
+                                videoBanner.apply {
+                                    cameraDistance = 12000f
+                                    pivotX = 0.0f
+                                    pivotY = -videoBanner.height/0.7f
+                                }
+                                emptyVideoBanner.apply {
+                                    cameraDistance = 12000f
+                                    pivotX = 0.0f
+                                    pivotY = -videoBanner.height/0.7f
+                                }
                                 if (!images.isNullOrEmpty())setUpImage(images)
                                 launch {
-                                    setImageAnimation(advertisementsImageView,advertisementsImageView2)
-                                    setAnimation(Advertisement_Video_CardView,bgImage)
+                                    //setBottomAnimation()
+                                    animatorHelper.setVideoAnimator(Advertisement_Video_CardView,bgImage)
+                                    animatorHelper.setImageAnimator(advertisementsImageView,advertisementsImageView2)
+                                    animatorHelper.setPromotionBannerAnimation(videoBanner)
+                                    animatorHelper.setEmptyBannerAnimation(emptyVideoBanner)
                                     mVideoList = videos
                                     startVideoService(videos)
                                 }
@@ -313,9 +345,9 @@
     fun onEvent(animateVideo: AnimateVideo){
         try {
             launch {
-                animatorVideo.start()
+
+                animatorHelper.startVideoAnimation()
                 bgImage.startAnimation(zoomOut)
-                Advertisement_Video_CardView.bringToFront()
             }
 
         }catch (e:Exception){
@@ -338,7 +370,7 @@
     fun setUpImage(images: List<Data>){
         var currentImageIndex = 0
         var firstTime = false
-        val glide = Glide.with(mContext)
+        val glide = Glide.with(advertisementsImageView.context)
         launch{
             while(isActive) {
                 if (currentImageIndex < images.size) {
@@ -355,11 +387,8 @@
                     if (firstTime || currentImageIndex != 0){
                         firstTime = true
                         launch {
-
                             advertisementsImageView2.startAnimation(zoomIn)
-                            advertisementsImageView.bringToFront()
-                            animatorImage.start()
-
+                            animatorHelper.startImageAnimation()
                         }
 
                     }
@@ -367,7 +396,7 @@
                     if (currentImageIndex >= images.size) {
                         currentImageIndex = 0
                     }
-                    EventBus.getDefault().post(PromotionEvent(images[currentImageIndex]))
+                    //EventBus.getDefault().post(PromotionEvent(images[currentImageIndex]))
                 }
 
                 delay(15 * 1000)
@@ -387,31 +416,59 @@
         }
     }
 
+    @Subscribe(threadMode = ThreadMode.MAIN)
+    fun onEvent(promotionData:PromotionEvent){
+        try{
+            when(promotionData.data.type){
+
+                ContentType.Image.value -> changeBannerQRCode(promotionData.data) else ->changeVideoQRCode(promotionData.data)
 
-    private fun setAnimation(playerView: RelativeLayout, bgImageView: RelativeLayout){
-        animatorVideo = ObjectAnimator.ofFloat(playerView, "rotationX", -180f, 0f)
-        animatorVideo.apply {
-            setDuration(1500)
-            AccelerateDecelerateInterpolator()
+            }
+        } catch (e:Exception){
+
         }
-        /*val zoomout: Animation = AnimationUtils.loadAnimation(context, R.anim.background_zoom_out)
-        bgImageView.startAnimation(zoomout)
-        playerView.bringToFront()*/
     }
 
+    private fun changeVideoQRCode(data: Data) {
+        val promotion = data.promotion
+        if (promotion != null && promotion.isExist) {
+            val color = ThemeColor(data.tintColor).getColor()
+
+            videoBanner.visibility = View.VISIBLE
+            emptyVideoBanner.visibility = View.GONE
+            animatorHelper.startPromotionBanner()
+            videoBanner.setElevationShadowColor(color)
+            promotion.link?.let {link->
+                Glide.with(videoQrCodeImage.context).load(generateQrCode(link,ThemeColor(color).getColor())).into(videoQrCodeImage)
+            }
+            promotion.logoUrl?.let { logoUrl ->
+                Glide.with(videoLogoImage.context).load(logoUrl).apply(imageOptions).into(videoLogoImage)
+                videoLogoImage.visibility = View.VISIBLE
+            }
+            if (!promotion.title.isNullOrEmpty()) titleTv.text = promotion.title
+            subTitleTv.text = getSubtitle(promotion.subtitle, promotion.code, color)
+        }
+        else {
 
-    private fun setImageAnimation(imageView: ImageView, imageView2: ImageView){
+            emptyVideoBanner.visibility = View.VISIBLE
+            videoBanner.visibility = View.GONE
+            animatorHelper.startEmptyBannerAnimation()
 
-        animatorImage = ObjectAnimator.ofFloat(imageView, "rotationY", 0f, 90f)
-        animatorImage.apply {
-            setDuration(1500)
-            AccelerateDecelerateInterpolator()
-            start()
         }
-        /*val zoomIn: Animation = AnimationUtils.loadAnimation(context, R.anim.background_zoom_in)
-        imageView2.startAnimation(zoomIn)
-        imageView.bringToFront()*/
+    }
 
+    private fun changeBannerQRCode(data: Data) {
+        Log.d("Data","${data}")
+        val promotion = data.promotion
+        val position = 4
+       /* if (promotion != null && promotion.isExist) sideFragmentCells.set(position,BannerDiscountCell(data)) else sideFragmentCells.set(position,WifiCell())
+        sideFragmentAdapter.apply {
+
+            //notifyItemChanged(position)
+            notifyItemRemoved(position)
+            notifyItemInserted(position)
+
+        }*/
     }
 
     private fun startVideoService(list:List<Data>){
@@ -438,4 +495,21 @@
         EventBus.getDefault().unregister(this)
     }
 
+    private fun generateQrCode(promotionLink: String, color: Int): Barcode {
+        return Barcode(promotionLink, BarcodeFormat.QR_CODE,color, Color.TRANSPARENT)
+    }
+
+    private fun getSubtitle(subtitle: String?, code: String?, color: Int): SpannedString {
+        return buildSpannedString {
+            if (!subtitle.isNullOrBlank()){
+                append(subtitle)
+            }
+            if (!code.isNullOrEmpty()){
+                if (!subtitle.isNullOrEmpty()) append(", ")
+                bold { color(color) { append("Use code ") } }
+                append(code)
+            }
+        }
+    }
+
 }
\ No newline at end of file
Index: app/src/main/java/com/routesme/taxi/MVVM/View/fragment/SideMenuFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.taxi.MVVM.View.fragment\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.util.DisplayMetrics\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.ViewGroup.LayoutParams.MATCH_PARENT\r\nimport android.view.WindowManager\r\nimport androidx.constraintlayout.widget.ConstraintLayout\r\nimport androidx.fragment.app.Fragment\r\nimport carbon.widget.ExpandableRecyclerView\r\nimport carbon.widget.RecyclerView\r\nimport com.routesme.taxi.Class.DateOperations\r\nimport com.routesme.taxi.Class.SideFragmentAdapter.SideFragmentAdapter\r\nimport com.routesme.taxi.ItemAnimator\r\nimport com.routesme.taxi.MVVM.Model.*\r\nimport com.routesme.taxi.MVVM.events.PromotionEvent\r\nimport com.routesme.taxi.R\r\nimport kotlinx.android.synthetic.main.side_menu_fragment.*\r\nimport kotlinx.android.synthetic.main.side_menu_fragment.view.*\r\nimport kotlinx.coroutines.*\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.lang.Exception\r\nimport java.lang.Runnable\r\nimport java.util.*\r\n\r\n\r\nclass SideMenuFragment : Fragment(),CoroutineScope by MainScope() {\r\n    private lateinit var mView: View\r\n    private lateinit var mContext: Context\r\n    private val dateOperations = DateOperations.instance\r\n    private lateinit var sideFragmentAdapter: SideFragmentAdapter\r\n    private lateinit var sideFragmentCells: MutableList<ISideFragmentCell>\r\n    private lateinit var presentJob : Job\r\n    private var screenWidth:Int?=null\r\n    //private lateinit var recyclerView: RecyclerView\r\n    override fun onAttach(context: Context) {\r\n        mContext = context\r\n        super.onAttach(context)\r\n    }\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View = inflater.inflate(R.layout.side_menu_fragment, container, false)\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        mView = view\r\n       // recyclerView = view.recyclerView as RecyclerView\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n    }\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        presentJob = Job()\r\n        val metrics = DisplayMetrics()\r\n        val windowManager = context?.getSystemService(Context.WINDOW_SERVICE) as WindowManager\r\n        windowManager.defaultDisplay?.getMetrics(metrics)\r\n        screenWidth = (metrics.widthPixels * 69) / 100\r\n        setupRecyclerView()\r\n    }\r\n\r\n\r\n    override fun onStart() {\r\n        EventBus.getDefault().register(this)\r\n        super.onStart()\r\n    }\r\n\r\n    override fun onStop() {\r\n        EventBus.getDefault().unregister(this)\r\n        super.onStop()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        presentJob.cancel()\r\n        //sideFragmentAdapter = null\r\n        recyclerView.adapter = null\r\n\r\n    }\r\n\r\n    private fun setupRecyclerView() {\r\n        val date = Date()\r\n        sideFragmentCells = mutableListOf<ISideFragmentCell>().apply {\r\n            add(EmptyVideoDiscountCell(screenWidth!!))\r\n            add(LargeEmptyCell())\r\n            add(DateCell(dateOperations.timeClock(date), dateOperations.dayOfWeek(date), dateOperations.date(date)))\r\n            add(SmallEmptyCell())\r\n            add(WifiCell())\r\n        }\r\n\r\n        sideFragmentAdapter = SideFragmentAdapter(sideFragmentCells)\r\n        recyclerView.apply {\r\n            adapter = sideFragmentAdapter\r\n            itemAnimator = ItemAnimator(mContext)\r\n        }\r\n        setTime()\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun setTime() {\r\n            CoroutineScope(Dispatchers.Main + presentJob).launch {\r\n                while (isActive){\r\n                    val date = Date()\r\n                    sideFragmentCells[2] = DateCell(dateOperations.timeClock(date), dateOperations.dayOfWeek(date), dateOperations.date(date))\r\n                    sideFragmentAdapter.notifyDataSetChanged()\r\n                    delay(60 * 1000)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    fun onEvent(promotionData:PromotionEvent){\r\n        try{\r\n            when(promotionData.data.type){\r\n\r\n                ContentType.Image.value -> changeBannerQRCode(promotionData.data)\r\n                else -> changeVideoQRCode(promotionData.data)\r\n            }\r\n        } catch (e:Exception){\r\n\r\n        }\r\n    }\r\n\r\n    private fun changeVideoQRCode(data: Data) {\r\n\r\n        val promotion = data.promotion\r\n        val position = 0\r\n        if (promotion != null && promotion.isExist) sideFragmentCells[position] = VideoDiscountCell(data,screenWidth!!) else sideFragmentCells[position] = EmptyVideoDiscountCell(screenWidth!!)\r\n        sideFragmentAdapter.apply {\r\n            notifyItemRemoved(position)\r\n            notifyItemInserted(position)\r\n            //notifyItemChanged(position)\r\n        }\r\n    }\r\n\r\n    private fun changeBannerQRCode(data: Data) {\r\n        Log.d(\"Data\",\"${data}\")\r\n        val promotion = data.promotion\r\n        val position = 4\r\n        if (promotion != null && promotion.isExist) sideFragmentCells.set(position,BannerDiscountCell(data)) else sideFragmentCells.set(position,WifiCell())\r\n        sideFragmentAdapter.apply {\r\n\r\n            //notifyItemChanged(position)\r\n            notifyItemRemoved(position)\r\n            notifyItemInserted(position)\r\n\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/routesme/taxi/MVVM/View/fragment/SideMenuFragment.kt	(revision 4ff5c82dae4a45c66a66a45e753cc707cb49071e)
+++ app/src/main/java/com/routesme/taxi/MVVM/View/fragment/SideMenuFragment.kt	(date 1612943609843)
@@ -62,7 +62,7 @@
         val windowManager = context?.getSystemService(Context.WINDOW_SERVICE) as WindowManager
         windowManager.defaultDisplay?.getMetrics(metrics)
         screenWidth = (metrics.widthPixels * 69) / 100
-        setupRecyclerView()
+        //setupRecyclerView()
     }
 
 
@@ -115,7 +115,7 @@
             }
     }
 
-    @Subscribe(threadMode = ThreadMode.MAIN)
+    /*@Subscribe(threadMode = ThreadMode.MAIN)
     fun onEvent(promotionData:PromotionEvent){
         try{
             when(promotionData.data.type){
@@ -127,16 +127,16 @@
 
         }
     }
-
+*/
     private fun changeVideoQRCode(data: Data) {
 
         val promotion = data.promotion
         val position = 0
         if (promotion != null && promotion.isExist) sideFragmentCells[position] = VideoDiscountCell(data,screenWidth!!) else sideFragmentCells[position] = EmptyVideoDiscountCell(screenWidth!!)
         sideFragmentAdapter.apply {
-            notifyItemRemoved(position)
-            notifyItemInserted(position)
-            //notifyItemChanged(position)
+            //notifyItemRemoved(position)
+            //notifyItemInserted(position)
+            notifyItemChanged(position)
         }
     }
 
@@ -147,9 +147,9 @@
         if (promotion != null && promotion.isExist) sideFragmentCells.set(position,BannerDiscountCell(data)) else sideFragmentCells.set(position,WifiCell())
         sideFragmentAdapter.apply {
 
-            //notifyItemChanged(position)
-            notifyItemRemoved(position)
-            notifyItemInserted(position)
+            notifyItemChanged(position)
+           // notifyItemRemoved(position)
+           // notifyItemInserted(position)
 
         }
     }
Index: app/src/main/java/com/routesme/taxi/uplevels/App.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.taxi.uplevels\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.app.Application\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.work.Constraints\r\nimport androidx.work.NetworkType\r\nimport androidx.work.PeriodicWorkRequest\r\nimport com.google.firebase.analytics.FirebaseAnalytics\r\nimport com.routesme.taxi.Class.DisplayManager\r\nimport com.routesme.taxi.LocationTrackingService.Class.TrackingService\r\nimport com.routesme.taxi.MVVM.Model.SignInCredentials\r\nimport com.routesme.taxi.MVVM.task.TaskManager\r\nimport com.routesme.taxi.helper.SharedPreferencesHelper\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport java.util.concurrent.TimeUnit\r\n\r\nclass App : Application() {\r\n    val account = Account()\r\n    private val displayManager = DisplayManager.instance\r\n    var signInCredentials: SignInCredentials? = null\r\n    var isNewLogin = false\r\n    var institutionId: String? = null\r\n    var taxiPlateNumber: String? = null\r\n    var vehicleId: String? = null\r\n    var institutionName: String? = null\r\n\r\n    companion object {\r\n        @get:Synchronized\r\n        var instance = App()\r\n        val constraint: Constraints = Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build()\r\n        val periodicWorkRequest : PeriodicWorkRequest = PeriodicWorkRequest.Builder(TaskManager::class.java, 0, TimeUnit.MINUTES).setConstraints(constraint).build()\r\n    }\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        instance = this\r\n        logApplicationStartingPeriod(currentPeriod())\r\n        displayManager.setAlarm(this)\r\n        //Log.d(\"Process\",\"${getProcessName()}\")\r\n        startTrackingService()\r\n    }\r\n\r\n    fun startTrackingService(){\r\n        val isRegistered = !getDeviceId().isNullOrEmpty()\r\n        if (isLocationPermissionsGranted() && isRegistered){\r\n            val intent = Intent(instance, TrackingService::class.java)\r\n            startService(intent)\r\n            //ContextCompat.startForegroundService(instance,intent)\r\n           // this.bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE)\r\n        }\r\n    }\r\n\r\n    private fun logApplicationStartingPeriod(timePeriod: TimePeriod) {\r\n        val params = Bundle()\r\n        params.putString(\"TimePeriod\", timePeriod.toString())\r\n        FirebaseAnalytics.getInstance(this).logEvent(\"application_starting_period\", params)\r\n    }\r\n    private fun currentPeriod(): TimePeriod {\r\n        val currentDate = currentDate()\r\n        return if (currentDate.after(parseDate(\"04:00\")) && currentDate.before(parseDate(\"12:00\"))) TimePeriod.Morning\r\n        else if (currentDate.after(parseDate(\"12:00\")) && currentDate.before(parseDate(\"17:00\"))) TimePeriod.Noon\r\n        else if (currentDate.after(parseDate(\"17:00\")) && currentDate.before(parseDate(\"24:00\"))) TimePeriod.Evening\r\n        else TimePeriod.Night\r\n    }\r\n    private fun currentDate(): Date {\r\n        val calendar = Calendar.getInstance()\r\n        val hour = calendar.get(Calendar.HOUR_OF_DAY)\r\n        val minute = calendar.get(Calendar.MINUTE)\r\n        return parseDate(\"$hour:$minute\")\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    private fun parseDate(time: String) = SimpleDateFormat(\"HH:mm\").parse(time)\r\n    enum class TimePeriod { Morning, Noon, Evening, Night }\r\n    private fun isLocationPermissionsGranted(): Boolean {\r\n        val permissions = arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION)\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            for (p in permissions) {\r\n                if (ContextCompat.checkSelfPermission(instance, p) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    private fun getDeviceId() =  getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE).getString(SharedPreferencesHelper.device_id,null)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/routesme/taxi/uplevels/App.kt	(revision 4ff5c82dae4a45c66a66a45e753cc707cb49071e)
+++ app/src/main/java/com/routesme/taxi/uplevels/App.kt	(date 1612791962004)
@@ -45,7 +45,7 @@
         logApplicationStartingPeriod(currentPeriod())
         displayManager.setAlarm(this)
         //Log.d("Process","${getProcessName()}")
-        startTrackingService()
+        //startTrackingService()
     }
 
     fun startTrackingService(){
