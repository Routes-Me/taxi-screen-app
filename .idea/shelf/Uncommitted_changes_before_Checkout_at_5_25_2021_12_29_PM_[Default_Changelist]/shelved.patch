Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\napply plugin: 'com.google.firebase.crashlytics'\r\napply plugin: 'kotlin-android'\r\napply plugin: 'kotlin-android-extensions'\r\napply plugin: \"org.jetbrains.kotlin.kapt\"\r\nandroid {\r\n    compileSdkVersion 29\r\n    buildToolsVersion '29.0.3'\r\n    defaultConfig {\r\n        applicationId \"com.routesme.vehicles\"\r\n        minSdkVersion 26\r\n        targetSdkVersion 29\r\n        versionCode 29\r\n        versionName \"3.6\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n        multiDexEnabled true\r\n        consumerProguardFiles 'proguard-consumer-rules.pro'\r\n        buildConfigField \"int\", \"OAUTH_RE_AUTH_RETRY_LIMIT\", '1'\r\n\r\n        javaCompileOptions {\r\n            annotationProcessorOptions {\r\n                arguments = [\"room.schemaLocation\": \"$projectDir/schemas\".toString()]\r\n            }\r\n        }\r\n        kotlinOptions {\r\n            jvmTarget = \"1.8\"\r\n        }\r\n    }\r\n/*\r\n    buildTypes {\r\n        debug {\r\n            minifyEnabled true\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), \"proguard-rules.pro\"\r\n        }\r\n        release {\r\n            minifyEnabled true\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), \"proguard-rules.pro\"\r\n\r\n        }\r\n    }\r\n    */\r\n\r\n    lintOptions {\r\n        checkReleaseBuilds false\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n\r\n    flavorDimensions 'default'\r\n    productFlavors {\r\n        taxi {\r\n            dimension 'default'\r\n            applicationId \"com.routesme.vehicles\"\r\n            applicationIdSuffix \".taxi\"\r\n            versionCode 29\r\n            versionName \"3.6\"\r\n        }\r\n\r\n        bus {\r\n            dimension 'default'\r\n            applicationId \"com.routesme.vehicles\"\r\n            applicationIdSuffix \".bus\"\r\n            versionCode 1\r\n            versionName \"1.0\"\r\n        }\r\n    }\r\n    sourceSets {\r\n        bus {\r\n            res.srcDirs = ['src/bus/res', 'src/bus/res/']\r\n            java.srcDirs = ['src/bus/java', 'src/bus/java/']\r\n        }\r\n        taxi {\r\n            res.srcDirs = ['src/taxi/res', 'src/taxi/res/']\r\n            java.srcDirs = ['src/taxi/java', 'src/taxi/java/']\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'com.android.support:design:29.0.3'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'androidx.recyclerview:recyclerview:1.1.0'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'com.android.support:multidex:1.0.3'\r\n    //Kotlin ...\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\r\n    //Firebase Crashlytics\r\n    implementation 'com.google.firebase:firebase-core:17.5.0'\r\n    implementation 'com.google.firebase:firebase-crashlytics:17.2.2'\r\n    implementation 'com.google.firebase:firebase-analytics:17.5.0'\r\n    //View Images\r\n    implementation 'com.github.bumptech.glide:glide:4.11.0'\r\n    kapt 'com.github.bumptech.glide:compiler:4.11.0'\r\n    // Zxing barcode dependency\r\n    implementation 'com.google.zxing:core:3.3.3'\r\n    implementation 'com.github.illiashenkoo:glide-barcode:0.0.1'\r\n    implementation 'com.pixplicity.sharp:library:1.1.0'\r\n    //Pattern Lock View Library.. For PassCode Authentication..\r\n    implementation 'com.andrognito.patternlockview:patternlockview:1.0.0'\r\n    //Ring Progress Bar for videoView ...\r\n    implementation 'com.github.HotBitmapGG:RingProgressBar:V1.2.3'\r\n    //Show & hide password editText Library\r\n    implementation 'com.github.scottyab:showhidepasswordedittext:0.8'\r\n    //Hotspot Configuration...\r\n    implementation 'com.linkedin.dexmaker:dexmaker:2.25.0'\r\n    //Spots progress dialog\r\n    implementation 'com.github.d-max:spots-dialog:1.1@aar'\r\n    //retrofit\r\n    implementation 'com.squareup.okhttp3:okhttp:3.14.4'\r\n    implementation 'com.squareup.retrofit2:retrofit:2.7.1'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.7.1'\r\n    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'\r\n    implementation 'com.google.code.gson:gson:2.8.6'\r\n    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.4'\r\n    //RxJave\r\n    implementation 'io.reactivex.rxjava2:rxjava:2.2.8'\r\n    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\r\n    implementation 'com.jakewharton.rxbinding:rxbinding:0.4.0'\r\n    //MVVM Architecture\r\n    kapt \"android.arch.lifecycle:compiler:1.1.1\"\r\n    implementation \"androidx.lifecycle:lifecycle-extensions:2.2.0\"\r\n    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'\r\n    implementation 'androidx.fragment:fragment-ktx:1.2.5'\r\n    implementation \"android.arch.lifecycle:viewmodel:1.1.1\"\r\n    implementation 'com.google.android.material:material:1.2.1'\r\n    //Location tracking service by kotlin ...\r\n    //Location Listener\r\n    implementation 'com.google.android.gms:play-services-maps:17.0.0'\r\n    implementation 'com.google.android.gms:play-services-location:17.1.0'\r\n    //noinspection GradleDynamicVersion\r\n    implementation 'com.google.maps.android:android-maps-utils:0.4+'\r\n    //1-Room database\r\n    //noinspection GradleDependency\r\n    implementation \"androidx.room:room-runtime:$room_version\"\r\n    implementation \"androidx.legacy:legacy-support-v4:1.0.0\"\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'\r\n    kapt \"androidx.room:room-compiler:$room_version\"\r\n    implementation \"androidx.room:room-ktx:$room_version\"\r\n    implementation \"android.arch.persistence.room:runtime:1.1.1\"\r\n    kapt \"android.arch.persistence.room:compiler:1.1.1\"\r\n    implementation 'com.microsoft.signalr:signalr:3.0.0'\r\n    implementation 'org.slf4j:slf4j-jdk14:1.7.25'\r\n    //Exoplayer\r\n    implementation 'com.google.android.exoplayer:exoplayer:2.12.1'\r\n    implementation 'com.google.android.exoplayer:exoplayer-core:2.12.1'\r\n    implementation 'com.google.android.exoplayer:exoplayer-dash:2.12.1'\r\n    implementation 'com.google.android.exoplayer:exoplayer-ui:2.12.1'\r\n    implementation 'org.greenrobot:eventbus:3.0.0'\r\n    implementation 'com.intuit.sdp:sdp-android:1.0.5'\r\n    implementation 'com.intuit.ssp:ssp-android:1.0.6'\r\n\r\n\r\n    implementation 'tk.zielony:carbon:0.16.0.1'\r\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.6'\r\n    implementation 'android.arch.work:work-runtime:1.0.1'\r\n    //Gif imageView\r\n    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.18'\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 3257e49268d6f4dfd4e6323196fca28083d821da)
+++ app/build.gradle	(date 1621770025481)
@@ -11,8 +11,8 @@
         applicationId "com.routesme.vehicles"
         minSdkVersion 26
         targetSdkVersion 29
-        versionCode 29
-        versionName "3.6"
+        versionCode 20
+        versionName "3.7"
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
         multiDexEnabled true
         consumerProguardFiles 'proguard-consumer-rules.pro'
Index: app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.vehicles.view.fragment\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.*\r\nimport android.os.Bundle\r\nimport android.os.IBinder\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.work.ExistingPeriodicWorkPolicy\r\nimport androidx.work.WorkManager\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.RequestManager\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\r\nimport com.bumptech.glide.request.RequestOptions\r\nimport com.routesme.vehicles.data.model.ContentResponse\r\nimport com.routesme.vehicles.data.model.Data\r\nimport com.routesme.vehicles.R\r\nimport com.routesme.vehicles.helper.AdvertisementsHelper\r\nimport com.routesme.vehicles.helper.DateHelper\r\nimport com.routesme.vehicles.helper.DateOperations\r\nimport com.routesme.vehicles.helper.SharedPreferencesHelper\r\nimport com.routesme.vehicles.room.AdvertisementDatabase\r\nimport com.routesme.vehicles.room.factory.ViewModelFactory\r\nimport com.routesme.vehicles.room.helper.DatabaseHelperImpl\r\nimport com.routesme.vehicles.room.viewmodel.RoomDBViewModel\r\nimport com.routesme.vehicles.App\r\nimport com.routesme.vehicles.service.VideoService\r\nimport com.routesme.vehicles.view.adapter.BottomBannerAdapter\r\nimport com.routesme.vehicles.view.adapter.ImageBannerAdapter\r\nimport com.routesme.vehicles.view.adapter.WifiAndQRCodeAdapter\r\nimport com.routesme.vehicles.view.events.AnimateVideo\r\nimport com.routesme.vehicles.view.events.DemoVideo\r\nimport com.routesme.vehicles.view.utils.Type\r\nimport com.routesme.vehicles.viewmodel.ContentViewModel\r\nimport dmax.dialog.SpotsDialog\r\nimport kotlinx.android.synthetic.taxi.content_fragment.*\r\nimport kotlinx.android.synthetic.taxi.date_cell.*\r\nimport kotlinx.coroutines.*\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.io.IOException\r\nimport java.util.*\r\n\r\nclass ContentFragment : Fragment(), CoroutineScope by MainScope() {\r\n    private val SEND_ANALYTICS_REPORT = \"SEND_ANALYTICS_REPORT\"\r\n    private lateinit var mContext: Context\r\n    private var sharedPreferences: SharedPreferences? = null\r\n    private var editor: SharedPreferences.Editor? = null\r\n    private var device_id: String = \"\"\r\n    private val SEC: Long = 30\r\n    private var position = 0\r\n    private val MIL: Long = 1000\r\n    private var count = 0\r\n    private var dialog: SpotsDialog? = null\r\n    private var isAlive = false\r\n    private val dateOperations = DateOperations.instance\r\n    private lateinit var callApiJob: Job\r\n    private var bottomBannerAdapter: BottomBannerAdapter? = null\r\n    private var wifiAndQRCodeAdapter: WifiAndQRCodeAdapter? = null\r\n    private var imageBannerAdapter: ImageBannerAdapter? = null\r\n    private lateinit var viewModel: RoomDBViewModel\r\n    private var date = Date()\r\n    private lateinit var dbHelper : DatabaseHelperImpl\r\n    private lateinit var glide: RequestManager\r\n    private lateinit var contentViewModel: ContentViewModel\r\n    private lateinit var imageOptions: RequestOptions\r\n    private var workManager = WorkManager.getInstance()\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        mContext = context\r\n    }\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view : View = inflater.inflate(R.layout.content_fragment, container, false)\r\n        return view\r\n    }\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        callApiJob = Job()\r\n        sharedPreferences = context?.getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE)\r\n        editor= sharedPreferences?.edit()\r\n        glide = Glide.with(App.instance)\r\n        imageOptions = RequestOptions().diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)\r\n        device_id = sharedPreferences?.getString(SharedPreferencesHelper.device_id, null)!!\r\n        viewModel = ViewModelProvider(this, ViewModelFactory(DatabaseHelperImpl(AdvertisementDatabase.invoke(mContext)))).get(RoomDBViewModel::class.java)\r\n        contentViewModel = ViewModelProvider(this.requireActivity()).get(ContentViewModel::class.java)\r\n        dbHelper = DatabaseHelperImpl(AdvertisementDatabase.invoke(mContext))\r\n        workManager.enqueueUniquePeriodicWork(SEND_ANALYTICS_REPORT, ExistingPeriodicWorkPolicy.KEEP, App.periodicWorkRequest)\r\n        fetchContent()\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun setTime() {\r\n\r\n        launch {\r\n            while (isActive){\r\n                date = Date()\r\n                clockTv.text = dateOperations.timeClock(date)\r\n                dayTv.text = \"${dateOperations.dayOfWeek(date)} \\n ${dateOperations.date(date)}\"\r\n                delay(60 * 1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun fetchContent() {\r\n        contentViewModel.getContent(1, 100, mContext)?.observe(viewLifecycleOwner, Observer<ContentResponse> {\r\n            dialog?.dismiss()\r\n            if (it != null) {\r\n                if (it.isSuccess) {\r\n                    val images = it.imageList.toList()\r\n                    val videos = it.videoList.toList()\r\n                    if (images.isNullOrEmpty() && videos.isNullOrEmpty()) {\r\n                        startThread(getString(R.string.no_data_found))\r\n                        return@Observer\r\n                    } else {\r\n                        if (isAlive) removeThread()\r\n                        constraintLayoutDateCell?.let {\r\n                            it.visibility = View.VISIBLE\r\n                        }\r\n                        launch {\r\n                            setTime()\r\n                            if (!images.isNullOrEmpty()) {\r\n                                setUpImageAdapter(images)\r\n                                setUpWifiAndQRCodeAdapter(images)\r\n                            }\r\n                            setUpAdapter(videos)\r\n                            startVideoService(videos)\r\n                        }\r\n                    }\r\n                } else {\r\n\r\n                    if (!it.mResponseErrors?.errors.isNullOrEmpty()) {\r\n                        it.mResponseErrors?.errors?.let {\r\n                            startThread(getString(R.string.no_data_found))\r\n                        }\r\n                    } else if (it.mThrowable != null) {\r\n\r\n                        if (it.mThrowable is IOException) {\r\n                            startThread(getString(R.string.network_Issue))\r\n                        } else {\r\n                            startThread(getString(R.string.conversion_Issue))\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                startThread(getString(R.string.unknown_error))\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun setUpWifiAndQRCodeAdapter(list: List<Data>) {\r\n        wifiAndQRCodeAdapter = WifiAndQRCodeAdapter(mContext, list)\r\n        bottomRightPromotion.apply {\r\n            adapter = wifiAndQRCodeAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n    }\r\n\r\n    private fun setUpAdapter(list: List<Data>) {\r\n        bottomBannerAdapter = BottomBannerAdapter(mContext, list)\r\n        bottomLeftPromtion.apply {\r\n            adapter = bottomBannerAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n    }\r\n\r\n    private fun setUpImageAdapter(images: List<Data>) {\r\n        imageBannerAdapter = ImageBannerAdapter(mContext, images)\r\n        viewPageSideBanner.apply {\r\n            adapter = imageBannerAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n        launch {\r\n            while (isActive) {\r\n               /* dbHelper.getList().forEach {\r\n                    Log.d(\"AnalyticsTesting\",\"${it.id},${it.resourceNumber},${it.date},${it.time_in_day},${it.advertisementId},${it.morning},${it.noon},${it.evening},${it.night},\")\r\n                }*/\r\n                val image =  images[count]\r\n                image.contentId?.let {\r\n                    viewModel.insertLog(it, image.resourceNumber!!, DateHelper.instance.getCurrentDate(), DateHelper.instance.getCurrentPeriod(), Type.IMAGE.media_type)\r\n                }\r\n                viewPageSideBanner.setCurrentItem(count, true)\r\n                bottomRightPromotion.setCurrentItem(count, true)\r\n                if (imageBannerAdapter?.itemCount!! - 1 === count) count = 0 else count++\r\n                delay(15 * 1000)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun removeThread() {\r\n        if (callApiJob.isActive) callApiJob.cancelChildren()\r\n        isAlive = false\r\n        EventBus.getDefault().post(DemoVideo(false, \"\"))\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    fun onEvent(animateVideo: AnimateVideo) {\r\n        try {\r\n            launch {\r\n                position = animateVideo.position\r\n                bottomLeftPromtion.setCurrentItem(position, true)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n\r\n        }\r\n    }\r\n\r\n    private fun videoProgressbarRunnable() {\r\n        launch {\r\n            while (isActive) {\r\n                val current = (playerView.player?.currentPosition)!!.toInt()\r\n                val progress = current * 100 / (playerView.player?.duration)!!.toInt()\r\n                videoRingProgressBar?.progress = progress\r\n                delay(1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun startThread(errorMessage: String) {\r\n        isAlive = true\r\n        EventBus.getDefault().post(DemoVideo(true, errorMessage))\r\n        CoroutineScope(Dispatchers.Main + callApiJob).launch {\r\n            delay(SEC * MIL)\r\n            fetchContent()\r\n\r\n        }\r\n    }\r\n\r\n    private fun startVideoService(list: List<Data>) {\r\n        val intent = Intent(mContext, VideoService::class.java)\r\n        intent.putExtra(\"video_list\", list as ArrayList<Data>)\r\n        mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE)\r\n\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        cancel()\r\n        Log.d(\"AnalyticsTesting\",\"Destroy\")\r\n        callApiJob.cancel()\r\n        AdvertisementsHelper.instance.deleteCache()\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        EventBus.getDefault().register(this)\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        EventBus.getDefault().unregister(this)\r\n    }\r\n\r\n    private val connection = object : ServiceConnection {\r\n        override fun onServiceDisconnected(name: ComponentName?) {\r\n\r\n        }\r\n\r\n        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {\r\n            if (service is VideoService.VideoServiceBinder) {\r\n                playerView.player = service.getExoPlayerInstance()\r\n                bottomLeftPromtion.setCurrentItem(playerView.player?.currentPeriodIndex!!, true)\r\n                videoProgressbarRunnable()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt	(revision 3257e49268d6f4dfd4e6323196fca28083d821da)
+++ app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt	(date 1621770202080)
@@ -76,7 +76,6 @@
         super.onAttach(context)
         mContext = context
     }
-
     override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
         val view : View = inflater.inflate(R.layout.content_fragment, container, false)
         return view
Index: app/src/main/java/com/routesme/vehicles/room/viewmodel/AdvertisementViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.vehicles.room.viewmodel\r\n\r\nimport android.util.Log\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.routesme.vehicles.helper.DateHelper\r\nimport com.routesme.vehicles.room.ResponseBody\r\nimport com.routesme.vehicles.room.entity.AdvertisementTracking\r\nimport com.routesme.vehicles.room.helper.DatabaseHelper\r\nimport com.routesme.vehicles.view.utils.Period\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\n\r\nclass RoomDBViewModel(private val dbHelper: DatabaseHelper) : ViewModel() {\r\n    private val MIN = 100000000\r\n    \r\n    private val analyticsListLiveData = MutableLiveData<ResponseBody<List<AdvertisementTracking>>>()\r\n    private val analyticsListAllLiveData = MutableLiveData<ResponseBody<List<AdvertisementTracking>>>()\r\n    private val deleteTableLiveData = MutableLiveData<ResponseBody<Int>>()\r\n    private val deleteAllTableLiveData = MutableLiveData<ResponseBody<Int>>()\r\n\r\n    fun insertLog(advertisementId: String, resourceNumber: String, timeStamp: Long, period: Period, type: String) {\r\n        val currentDate = DateHelper.instance.getDateString(timeStamp)\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            try {\r\n                var analysisRecord = dbHelper.getItem(resourceNumber, currentDate)\r\n\r\n                if (analysisRecord != null) {\r\n                    update(analysisRecord.id, period)\r\n                } else {\r\n                    dbHelper.insertAdvertisement(AdvertisementTracking(advertisementId = advertisementId, resourceNumber = resourceNumber, date = timeStamp, morning = 0, noon = 0, evening = 0, night = 0, time_in_day = currentDate, media_type = type))\r\n                    var lastItem = dbHelper.getLastItem(resourceNumber, currentDate)\r\n                    update(lastItem.id, period)\r\n                }\r\n\r\n            } catch (e: Exception) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    fun update(id: Int, period: Period) {\r\n        viewModelScope.launch {\r\n            try {\r\n                when (period) {\r\n                    Period.MORNING -> dbHelper.updateSlotMorning(id)\r\n                    Period.NOON -> dbHelper.updateSlotNoon(id)\r\n                    Period.EVENING -> dbHelper.updateSlotEvening(id)\r\n                    Period.NIGHT -> dbHelper.updateSlotNight(id)\r\n                }\r\n            } catch (e: Exception) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAllList(): LiveData<ResponseBody<List<AdvertisementTracking>>> {\r\n\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val getAllList = dbHelper.getAllList()\r\n            analyticsListAllLiveData.postValue(ResponseBody.success(getAllList))\r\n        }\r\n        return analyticsListAllLiveData\r\n    }\r\n\r\n\r\n    fun deleteAllData(): LiveData<ResponseBody<Int>> {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val deleteData = dbHelper.deleteAllTable()\r\n            deleteAllTableLiveData.postValue(ResponseBody.success(deleteData))\r\n        }\r\n        return deleteAllTableLiveData\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/routesme/vehicles/room/viewmodel/AdvertisementViewModel.kt	(revision 3257e49268d6f4dfd4e6323196fca28083d821da)
+++ app/src/main/java/com/routesme/vehicles/room/viewmodel/AdvertisementViewModel.kt	(date 1621930576170)
@@ -1,6 +1,5 @@
 package com.routesme.vehicles.room.viewmodel
 
-import android.util.Log
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.ViewModel
@@ -15,7 +14,6 @@
 
 class RoomDBViewModel(private val dbHelper: DatabaseHelper) : ViewModel() {
     private val MIN = 100000000
-    
     private val analyticsListLiveData = MutableLiveData<ResponseBody<List<AdvertisementTracking>>>()
     private val analyticsListAllLiveData = MutableLiveData<ResponseBody<List<AdvertisementTracking>>>()
     private val deleteTableLiveData = MutableLiveData<ResponseBody<Int>>()
