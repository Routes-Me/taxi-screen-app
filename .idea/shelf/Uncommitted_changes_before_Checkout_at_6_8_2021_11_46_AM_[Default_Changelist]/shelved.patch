Index: app/src/taxi/java/com/routesme/vehicles/view/activity/HomeActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.vehicles.view.activity\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.ComponentName\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.content.pm.PackageManager\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.activity.viewModels\r\nimport androidx.fragment.app.commit\r\nimport androidx.fragment.app.replace\r\nimport androidx.lifecycle.Observer\r\nimport com.google.android.exoplayer2.MediaItem\r\nimport com.google.android.exoplayer2.Player\r\nimport com.google.android.exoplayer2.SimpleExoPlayer\r\nimport com.google.android.exoplayer2.source.MediaSource\r\nimport com.google.android.exoplayer2.source.ProgressiveMediaSource\r\nimport com.google.android.exoplayer2.upstream.DataSpec\r\nimport com.google.android.exoplayer2.upstream.RawResourceDataSource\r\nimport com.google.android.gms.tasks.OnCompleteListener\r\nimport com.google.firebase.messaging.FirebaseMessaging\r\nimport com.routesme.vehicles.BuildConfig\r\nimport com.routesme.vehicles.helper.*\r\nimport com.routesme.vehicles.view.fragment.ContentFragment\r\nimport com.routesme.vehicles.viewmodel.SubmitApplicationVersionViewModel\r\nimport com.routesme.vehicles.view.events.DemoVideo\r\nimport com.routesme.vehicles.R\r\nimport com.routesme.vehicles.data.model.*\r\nimport com.routesme.vehicles.helper.SharedPreferencesHelper\r\nimport com.routesme.vehicles.nearby.NearByOperation\r\nimport com.routesme.vehicles.view.events.PublishNearBy\r\nimport com.routesme.vehicles.viewmodel.TerminalViewModel\r\nimport kotlinx.android.synthetic.taxi.home_screen.*\r\nimport kotlinx.coroutines.*\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.io.IOException\r\n\r\nclass HomeActivity : com.routesme.vehicles.view.activity.PermissionsActivity(), IModeChanging,CoroutineScope by MainScope(){\r\n    private var sharedPreferences: SharedPreferences? = null\r\n    private var editor: SharedPreferences.Editor? = null\r\n    private val helper by lazy { HomeScreenHelper(this) }\r\n    private var isHotspotAlive = false\r\n    private var pressedTime: Long = 0\r\n    private lateinit var mView: View\r\n    private var clickTimes = 0\r\n    private var player : SimpleExoPlayer?=null\r\n    private  var from_date:String?=null\r\n    private  var deviceId:String?=null\r\n    private  var terminalId:String?=null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        DisplayManager.instance.registerActivity(this)\r\n        if (DisplayManager.instance.isAnteMeridiem()) {\r\n            DisplayManager.instance.currentMode = Mode.Light\r\n            setTheme(R.style.FullScreen_Light_Mode)\r\n            ScreenBrightness.instance.setBrightnessValue(this, 80)\r\n        } else {\r\n            DisplayManager.instance.currentMode = Mode.Dark\r\n            setTheme(R.style.FullScreen_Dark_Mode)\r\n            ScreenBrightness.instance.setBrightnessValue(this, 20)\r\n        }\r\n        setContentView(R.layout.home_screen)\r\n        sharedPreferences = getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE)\r\n        editor= sharedPreferences?.edit()\r\n        from_date = sharedPreferences?.getString(SharedPreferencesHelper.from_date,null)\r\n        deviceId = sharedPreferences?.getString(SharedPreferencesHelper.device_id, null)\r\n        terminalId = sharedPreferences?.getString(SharedPreferencesHelper.terminal_id, null)\r\n        //if(terminalId == null) registerTerminal(getParemeter(deviceId!!))\r\n        submitApplicationVersion()\r\n        launch {initializePlayer()}\r\n        turnOnHotspot()\r\n        openPatternBtn.setOnClickListener { openPattern() }\r\n        helper.requestRuntimePermissions()\r\n        addFragments()\r\n        setSystemUiVisibility()\r\n    }\r\n\r\n    private fun registerTerminal(parameter:Parameter) {\r\n        val terminalViewModel : TerminalViewModel by viewModels()\r\n        terminalViewModel.createTerminal(parameter,this).observe(this, Observer<TerminalResponse> {\r\n            if (it != null) {\r\n                if (it.isSuccess) {\r\n                    editor?.apply {\r\n                        putString(SharedPreferencesHelper.terminal_id, it.terminalId)\r\n                    }?.apply()\r\n                } else {\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun getParemeter(deviceId: String): Parameter {\r\n        val parameter = Parameter()\r\n        parameter.DeviceId = deviceId\r\n        FirebaseMessaging.getInstance().token.addOnCompleteListener(OnCompleteListener { task ->\r\n            // Get new FCM registration token\r\n            parameter.NotificationIdentifier  = task.result\r\n            Log.d(\"FCM_TOKEN\", task.result)\r\n        })\r\n        return parameter\r\n    }\r\n\r\n    private fun setSystemUiVisibility() {\r\n\r\n        window.decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                or View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY)\r\n    }\r\n\r\n    @SuppressLint(\"CommitPrefEdits\")\r\n    private fun submitApplicationVersion() {\r\n        val submittedVersion = sharedPreferences?.getString(SharedPreferencesHelper.submitted_version, null)\r\n        val currentVersion = \"${BuildConfig.VERSION_NAME}.${BuildConfig.VERSION_CODE}\"\r\n        if (currentVersion.isNotEmpty()){\r\n            if (submittedVersion.isNullOrEmpty() || submittedVersion != currentVersion){\r\n                val packageName = BuildConfig.APPLICATION_ID\r\n                deviceId?.let {\r\n                    val submitApplicationVersionCredentials = SubmitApplicationVersionCredentials(packageName, currentVersion)\r\n                    sendCurrentVersionToServer(it, submitApplicationVersionCredentials)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun sendCurrentVersionToServer(deviceId: String, submitApplicationVersionCredentials: SubmitApplicationVersionCredentials){\r\n        val submitApplicationVersionViewModel: SubmitApplicationVersionViewModel by viewModels()\r\n        submitApplicationVersionViewModel.submitApplicationVersion(deviceId, submitApplicationVersionCredentials, this).observe(this, Observer<SubmitApplicationVersionResponse> {\r\n            if (it != null) {\r\n                if (it.isSuccess) {\r\n\r\n                    editor?.putString(SharedPreferencesHelper.submitted_version, submitApplicationVersionCredentials.versions)?.apply()\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private suspend fun initializePlayer() {\r\n        player = SimpleExoPlayer.Builder(demoVideoPlayer.context).build()\r\n        demoVideoPlayer.player = player\r\n        val mediaSource = buildRawMediaSource()\r\n        withContext(Dispatchers.Main){\r\n            mediaSource?.let {\r\n                player?.apply {\r\n                    setMediaSource(it)\r\n                    prepare()\r\n                    repeatMode = Player.REPEAT_MODE_ONE\r\n                    playWhenReady = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private suspend fun buildRawMediaSource(): MediaSource? {\r\n        return withContext(Dispatchers.Default){\r\n            val rawDataSource = RawResourceDataSource(this@HomeActivity)\r\n            rawDataSource.open(DataSpec(RawResourceDataSource.buildRawResourceUri(R.raw.offline_video)))\r\n            val mediaItem = MediaItem.fromUri(rawDataSource.uri!!)\r\n            rawDataSource.close()\r\n            val mediaSource = ProgressiveMediaSource.Factory { rawDataSource }.createMediaSource(mediaItem)\r\n            return@withContext mediaSource\r\n        }\r\n    }\r\n    private fun addFragments() {\r\n        supportFragmentManager.commit {\r\n            replace<ContentFragment>(R.id.contentFragment_container)\r\n        }\r\n    }\r\n\r\n    private fun removeFragments() {\r\n        val contentFragment = supportFragmentManager.findFragmentByTag(\"Content_Fragment\")\r\n        contentFragment?.let { supportFragmentManager.beginTransaction().remove(it).commit() }\r\n    }\r\n    override fun onPermissionsOkay() {}\r\n\r\n    private fun openPattern() {\r\n        clickTimes++\r\n        if (pressedTime + 1000 > System.currentTimeMillis() && clickTimes >= 10) {\r\n            helper.showAdminVerificationDialog()\r\n            clickTimes = 0\r\n        }\r\n        pressedTime = System.currentTimeMillis()\r\n    }\r\n    override fun onModeChange() {\r\n        removeFragments()\r\n        recreate()\r\n    }\r\n\r\n    private fun turnOnHotspot() {\r\n        val intent = Intent(getString(R.string.intent_action_turnon))\r\n        sendImplicitBroadcast(intent)\r\n        isHotspotAlive = true\r\n    }\r\n\r\n    private fun turnOffHotspot() {\r\n\r\n        val intent = Intent(getString(R.string.intent_action_turnoff))\r\n        sendImplicitBroadcast(intent)\r\n        isHotspotAlive = false\r\n    }\r\n    private fun sendImplicitBroadcast(i: Intent) {\r\n        val pm: PackageManager = this.packageManager\r\n        val matches = pm.queryBroadcastReceivers(i, 0)\r\n        for (resolveInfo in matches) {\r\n            val explicit = Intent(i)\r\n            val cn = ComponentName(resolveInfo.activityInfo.applicationInfo.packageName, resolveInfo.activityInfo.name)\r\n            explicit.component = cn\r\n            this.sendBroadcast(explicit)\r\n        }\r\n    }\r\n\r\n    private fun getScreenInfo(): Parameter {\r\n        //return sharedPreferences?.getString(SharedPreferencesHelper.device_id, null)!!\r\n        val item = Parameter()\r\n        item.DeviceId = sharedPreferences?.getString(SharedPreferencesHelper.device_id, null)\r\n        item.plateNo = sharedPreferences?.getString(SharedPreferencesHelper.vehicle_plate_number, null)\r\n        return item\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    fun onEvent(demoVideo: DemoVideo){\r\n        try {\r\n                if(demoVideo.isPlay){\r\n                    textViewError.visibility = View.VISIBLE\r\n                    textViewError.text = demoVideo.errorMessage\r\n                    activityVideoCover.visibility = View.VISIBLE\r\n                    demoVideoPlayer.visibility = View.VISIBLE\r\n                    playVideo()\r\n                }else {\r\n                    textViewError.visibility = View.GONE\r\n                    activityVideoCover.visibility = View.GONE\r\n                    demoVideoPlayer.visibility = View.GONE\r\n                    if(player?.isPlaying!!) stopVideo()\r\n\r\n\r\n\r\n\r\n                }\r\n        } catch (e: IllegalArgumentException) {\r\n            e.printStackTrace()\r\n        }\r\n\r\n    }\r\n    @Subscribe()\r\n    fun onEvent(boolean: PublishNearBy){\r\n        Log.d(\"Publish\",\"Event Trigger\")\r\n        NearByOperation.instance.publish(getScreenInfo(),this)\r\n\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        if(player !=null){\r\n            player?.release()\r\n            player = null\r\n        }\r\n        turnOffHotspot()\r\n        removeFragments()\r\n        if (DisplayManager.instance.wasRegistered(this)) DisplayManager.instance.unregisterActivity(this)\r\n        cancel()\r\n    }\r\n    override fun onStart() {\r\n        NearByOperation.instance.publish(getScreenInfo(),this)\r\n        EventBus.getDefault().register(this)\r\n        super.onStart()\r\n    }\r\n\r\n    override fun onStop() {\r\n        Log.d(\"LifeCycle\",\"Stop\")\r\n        EventBus.getDefault().unregister(this)\r\n        super.onStop()\r\n    }\r\n\r\n    fun playVideo(){\r\n\r\n        player?.play()\r\n\r\n    }\r\n\r\n    fun stopVideo(){\r\n\r\n        player?.pause()\r\n\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/taxi/java/com/routesme/vehicles/view/activity/HomeActivity.kt	(revision 60526739aec2462db435d6c0953e35274464f31c)
+++ app/src/taxi/java/com/routesme/vehicles/view/activity/HomeActivity.kt	(date 1623141797417)
@@ -71,7 +71,7 @@
         from_date = sharedPreferences?.getString(SharedPreferencesHelper.from_date,null)
         deviceId = sharedPreferences?.getString(SharedPreferencesHelper.device_id, null)
         terminalId = sharedPreferences?.getString(SharedPreferencesHelper.terminal_id, null)
-        //if(terminalId == null) registerTerminal(getParemeter(deviceId!!))
+        if(terminalId == null) registerTerminal(getParemeter(deviceId!!))
         submitApplicationVersion()
         launch {initializePlayer()}
         turnOnHotspot()
