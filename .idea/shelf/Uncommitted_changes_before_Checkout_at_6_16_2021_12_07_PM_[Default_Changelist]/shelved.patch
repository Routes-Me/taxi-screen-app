Index: app/src/taxi/java/com/routesme/vehicles/service/VideoService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.vehicles.service\r\n\r\nimport android.app.Activity\r\nimport android.app.Service\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.os.Binder\r\nimport android.os.IBinder\r\nimport android.util.Log\r\nimport androidx.annotation.Nullable\r\nimport com.google.android.exoplayer2.*\r\nimport com.google.android.exoplayer2.source.MediaSource\r\nimport com.google.android.exoplayer2.source.ProgressiveMediaSource\r\nimport com.google.android.exoplayer2.upstream.DataSource\r\nimport com.google.android.exoplayer2.upstream.DefaultAllocator\r\nimport com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory\r\nimport com.google.android.exoplayer2.upstream.cache.CacheDataSource\r\nimport com.google.android.exoplayer2.util.Util\r\nimport com.routesme.vehicles.R\r\nimport com.routesme.vehicles.data.model.Data\r\nimport com.routesme.vehicles.helper.AdvertisementsHelper\r\nimport com.routesme.vehicles.helper.DateHelper\r\nimport com.routesme.vehicles.helper.SharedPreferencesHelper\r\nimport com.routesme.vehicles.room.AdvertisementDatabase\r\nimport com.routesme.vehicles.room.helper.DatabaseHelperImpl\r\nimport com.routesme.vehicles.room.viewmodel.RoomDBViewModel\r\nimport com.routesme.vehicles.view.events.AnimateVideo\r\nimport com.routesme.vehicles.view.events.DemoVideo\r\nimport com.routesme.vehicles.view.utils.Type\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.MainScope\r\nimport org.greenrobot.eventbus.EventBus\r\n\r\n\r\nclass VideoService : Service(), CoroutineScope by MainScope() {\r\n    var onStartMedia = true\r\n    private lateinit var exoPlayer: SimpleExoPlayer\r\n    var currentMediaItemId = 0\r\n    private var count = 0\r\n    private var isPlayingDemoVideo = false\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n    private lateinit var editor: SharedPreferences.Editor\r\n    private var isCacheCleared:Boolean?=null\r\n    private lateinit var viewModel: RoomDBViewModel\r\n    override fun onBind(intent: Intent?): IBinder? {\r\n        exoPlayer.playWhenReady = true\r\n        setMediaPlayer(intent?.getSerializableExtra(\"video_list\") as List<Data>)\r\n\r\n        return VideoServiceBinder()\r\n    }\r\n\r\n    inner class VideoServiceBinder : Binder() {\r\n\r\n        /**\r\n         * This method should be used only for setting the exoplayer instance.\r\n         * If exoplayer's internal are altered or accessed we can not guarantee\r\n         * things will work correctly.\r\n         */\r\n        fun getExoPlayerInstance() = exoPlayer\r\n    }\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        exoPlayer = SimpleExoPlayer.Builder(this).setLoadControl(getLoadControl()).build()\r\n        sharedPreferences = getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE)\r\n        editor = sharedPreferences.edit()\r\n        viewModel = RoomDBViewModel(DatabaseHelperImpl(AdvertisementDatabase.invoke(this)))\r\n    }\r\n\r\n    private fun getLoadControl(): DefaultLoadControl {\r\n\r\n        val loadControl = DefaultLoadControl.Builder()\r\n                .setAllocator(DefaultAllocator(true, C.DEFAULT_BUFFER_SEGMENT_SIZE))\r\n                .setBufferDurationsMs(\r\n                        DefaultLoadControl.DEFAULT_MIN_BUFFER_MS,  // this is it!\r\n                        DefaultLoadControl.DEFAULT_MAX_BUFFER_MS,\r\n                        DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_MS,\r\n                        DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS\r\n                )\r\n                .setTargetBufferBytes(DefaultLoadControl.DEFAULT_TARGET_BUFFER_BYTES)\r\n                .setPrioritizeTimeOverSizeThresholds(DefaultLoadControl.DEFAULT_PRIORITIZE_TIME_OVER_SIZE_THRESHOLDS)\r\n                .createDefaultLoadControl()\r\n\r\n        return loadControl\r\n    }\r\n\r\n    fun setMediaPlayer(list: List<Data>) {\r\n        exoPlayer.apply {\r\n            setMediaSources(getMediaSource(list))\r\n            repeatMode = Player.REPEAT_MODE_ALL\r\n            playWhenReady = true\r\n            prepare()\r\n            play()\r\n            volume = 0f\r\n            addListener(object : Player.EventListener {\r\n\r\n                override fun onMediaItemTransition(@Nullable mediaItem: MediaItem?, @Player.MediaItemTransitionReason reason: Int) {\r\n                    currentMediaItemId = exoPlayer.currentPeriodIndex\r\n                    if (currentMediaItemId == 0) currentMediaItemId = list.size - 1 else currentMediaItemId = currentMediaItemId - 1\r\n                    currentMediaItemId.let {\r\n                        val video =  list[it]\r\n                        video.contentId?.let {\r\n                            viewModel.insertLog(it, video.resourceNumber!!, DateHelper.instance.getCurrentDate(), DateHelper.instance.getCurrentPeriod(), Type.VIDEO.media_type)\r\n                        }\r\n                    }\r\n                    EventBus.getDefault().post(AnimateVideo(true, exoPlayer.currentPeriodIndex))\r\n                }\r\n\r\n                override fun onPlayerStateChanged(playWhenReady: Boolean, playbackState: Int) {\r\n                    when (playbackState) {\r\n                        Player.STATE_IDLE -> {\r\n                            exoPlayer.prepare()\r\n                            exoPlayer.playbackState\r\n                        }\r\n                        Player.STATE_BUFFERING -> {\r\n                            count++\r\n                            if (count >= 5) {\r\n                                count = 0\r\n                                EventBus.getDefault().post(DemoVideo(true, \"NO VIDEO CACHE\"))\r\n                                editor.putBoolean(SharedPreferencesHelper.isCacheClear, false).apply()\r\n                                isPlayingDemoVideo = true\r\n                            }\r\n                        }\r\n                        Player.STATE_READY -> {\r\n                            if (isPlayingDemoVideo) {\r\n                                EventBus.getDefault().post(DemoVideo(false, \"\"))\r\n                                isPlayingDemoVideo = false\r\n                            }\r\n                            count = 0\r\n                        }\r\n                        Player.STATE_ENDED -> {\r\n\r\n                        }\r\n                    }\r\n                }\r\n\r\n                override fun onPlayerError(error: ExoPlaybackException) {\r\n                    when (error.type) {\r\n                        ExoPlaybackException.TYPE_SOURCE -> {\r\n                            Log.e(\"ExoPlayer\", \"TYPE_SOURCE\")\r\n                            moveToNextVideo()\r\n                            prepare()\r\n                        }\r\n                        ExoPlaybackException.TYPE_RENDERER -> {\r\n                            moveToNextVideo()\r\n                            prepare()\r\n                            Log.e(\"ExoPlayer\", \"TYPE_RENDERER\")\r\n                        }\r\n                        ExoPlaybackException.TYPE_UNEXPECTED -> {\r\n                            moveToNextVideo()\r\n                            Log.e(\"ExoPlayer\", \"TYPE_UNEXPECTED\")\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    private fun moveToNextVideo(){\r\n        exoPlayer.seekTo(exoPlayer.nextWindowIndex, 0)\r\n    }\r\n\r\n    fun getMediaSource(videos: List<Data>): MutableList<MediaSource> {\r\n        var mediaSource = ArrayList<MediaSource>()\r\n        val dataSourceFactory: DataSource.Factory = CacheDataSource.Factory().setCache(AdvertisementsHelper.simpleCache).setUpstreamDataSourceFactory(DefaultHttpDataSourceFactory(Util.getUserAgent(this, getString(R.string.app_name)))).setFlags(CacheDataSource.FLAG_IGNORE_CACHE_ON_ERROR)\r\n        videos.let { videos ->\r\n            for (video in videos) {\r\n                val mediaSourceItem = ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(MediaItem.fromUri(video.url!!))\r\n                mediaSource.add(mediaSourceItem)\r\n            }\r\n            return mediaSource\r\n        }\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        exoPlayer.release()\r\n        stopSelf()\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/taxi/java/com/routesme/vehicles/service/VideoService.kt	(revision f77cc1664bbcde2a25e3a9296a6e1335940f45f8)
+++ app/src/taxi/java/com/routesme/vehicles/service/VideoService.kt	(date 1623834390119)
@@ -50,7 +50,6 @@
     }
 
     inner class VideoServiceBinder : Binder() {
-
         /**
          * This method should be used only for setting the exoplayer instance.
          * If exoplayer's internal are altered or accessed we can not guarantee
@@ -80,7 +79,6 @@
                 .setTargetBufferBytes(DefaultLoadControl.DEFAULT_TARGET_BUFFER_BYTES)
                 .setPrioritizeTimeOverSizeThresholds(DefaultLoadControl.DEFAULT_PRIORITIZE_TIME_OVER_SIZE_THRESHOLDS)
                 .createDefaultLoadControl()
-
         return loadControl
     }
 
