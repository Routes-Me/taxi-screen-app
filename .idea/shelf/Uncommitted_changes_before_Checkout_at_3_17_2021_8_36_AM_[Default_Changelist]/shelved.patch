Index: app/src/main/java/com/routesme/taxi/view/fragment/ContentFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.taxi.view.fragment\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.*\r\nimport android.os.Bundle\r\nimport android.os.IBinder\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.lifecycle.ViewModelProviders\r\nimport androidx.work.WorkInfo\r\nimport androidx.work.WorkManager\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.RequestManager\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\r\nimport com.bumptech.glide.request.RequestOptions\r\nimport com.google.gson.JsonArray\r\nimport com.google.gson.JsonObject\r\nimport com.routesme.taxi.App\r\nimport com.routesme.taxi.R\r\nimport com.routesme.taxi.data.model.ContentResponse\r\nimport com.routesme.taxi.data.model.Data\r\nimport com.routesme.taxi.data.model.ReportResponse\r\nimport com.routesme.taxi.helper.AdvertisementsHelper\r\nimport com.routesme.taxi.helper.DateHelper\r\nimport com.routesme.taxi.helper.DateOperations\r\nimport com.routesme.taxi.helper.SharedPreferencesHelper\r\nimport com.routesme.taxi.room.AdvertisementDatabase\r\nimport com.routesme.taxi.room.ResponseBody\r\nimport com.routesme.taxi.room.entity.AdvertisementTracking\r\nimport com.routesme.taxi.room.factory.ViewModelFactory\r\nimport com.routesme.taxi.room.helper.DatabaseHelperImpl\r\nimport com.routesme.taxi.room.viewmodel.RoomDBViewModel\r\nimport com.routesme.taxi.service.VideoService\r\nimport com.routesme.taxi.view.adapter.BottomBannerAdapter\r\nimport com.routesme.taxi.view.adapter.ImageBannerAdapter\r\nimport com.routesme.taxi.view.adapter.WifiAndQRCodeAdapter\r\nimport com.routesme.taxi.view.events.AnimateVideo\r\nimport com.routesme.taxi.view.events.DemoVideo\r\nimport com.routesme.taxi.view.utils.Type\r\nimport com.routesme.taxi.viewmodel.ContentViewModel\r\nimport dmax.dialog.SpotsDialog\r\nimport kotlinx.android.synthetic.main.content_fragment.*\r\nimport kotlinx.android.synthetic.main.date_cell.*\r\nimport kotlinx.coroutines.*\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.io.IOException\r\nimport java.util.*\r\n\r\nclass ContentFragment :Fragment(),CoroutineScope by MainScope(){\r\n\r\n    private lateinit var mContext: Context\r\n    private var sharedPreferences: SharedPreferences? = null\r\n    private var editor: SharedPreferences.Editor? = null\r\n    private var device_id : String = \"\"\r\n    private val SEC:Long = 300\r\n    private var position = 0\r\n    private val MIL:Long = 1000\r\n    private var count = 0\r\n    private var dialog: SpotsDialog? = null\r\n    private var isAlive = false\r\n    private val dateOperations = DateOperations.instance\r\n    private lateinit var  callApiJob : Job\r\n    private var bottomBannerAdapter : BottomBannerAdapter?=null\r\n    private var wifiAndQRCodeAdapter : WifiAndQRCodeAdapter?=null\r\n    private var imageBannerAdapter : ImageBannerAdapter?=null\r\n    private lateinit var viewModel: RoomDBViewModel\r\n    private var date = Date()\r\n    private lateinit var glide:RequestManager\r\n    private lateinit var contentViewModel : ContentViewModel\r\n    private lateinit var imageOptions: RequestOptions\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        mContext = context\r\n    }\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view : View = inflater.inflate(R.layout.content_fragment, container, false)\r\n        return view\r\n    }\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        callApiJob = Job()\r\n        sharedPreferences = context?.getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE)\r\n        editor= sharedPreferences?.edit()\r\n        glide = Glide.with(App.instance)\r\n        imageOptions = RequestOptions().diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)\r\n        device_id = sharedPreferences?.getString(SharedPreferencesHelper.device_id, null)!!\r\n        viewModel =  ViewModelProvider(this, ViewModelFactory(DatabaseHelperImpl(AdvertisementDatabase.invoke(mContext)))).get(RoomDBViewModel::class.java)\r\n        contentViewModel = ViewModelProvider(this.requireActivity()).get(ContentViewModel::class.java)\r\n        WorkManager.getInstance().enqueue(App.periodicWorkRequest)\r\n        observeTaskManager()\r\n        fetchContent()\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun setTime() {\r\n\r\n        launch {\r\n            while (isActive){\r\n                date = Date()\r\n                clockTv.text = dateOperations.timeClock(date)\r\n                dayTv.text = \"${dateOperations.dayOfWeek(date)} \\n ${dateOperations.date(date)}\"\r\n                delay(60 * 1000)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun observeTaskManager(){\r\n\r\n        WorkManager.getInstance().getWorkInfoByIdLiveData(App.periodicWorkRequest.id)\r\n                .observe(viewLifecycleOwner, Observer { workInfo ->\r\n\r\n                    val status = workInfo.state.name\r\n                    Log.d(\"Worker\",\"${status}\")\r\n                    if((workInfo != null) && (workInfo.state == WorkInfo.State.ENQUEUED)){\r\n                        observeAnalytics()\r\n                    }\r\n                })\r\n    }\r\n\r\n    private fun observeAnalytics(){\r\n\r\n        viewModel.getReport(DateHelper.instance.getCurrentDate()).observe(viewLifecycleOwner, Observer {\r\n\r\n            when(it.status){\r\n\r\n                ResponseBody.Status.SUCCESS -> {\r\n\r\n                    it.data?.let {list->\r\n                        val postReportViewModel: ContentViewModel by viewModels()\r\n                        device_id.let { deviceId->\r\n                            postReportViewModel.postReport(mContext,getJsonArray(list),deviceId).observe(viewLifecycleOwner , Observer<ReportResponse> {\r\n                                if(it.isSuccess){\r\n\r\n                                    observeDeleteTable()\r\n\r\n                                }\r\n                            })\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n                ResponseBody.Status.ERROR -> {\r\n\r\n                    Log.d(\"TaskManagerPeriodic\",\"No Data Found\")\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun observeDeleteTable(){\r\n\r\n        viewModel.deleteTable(DateHelper.instance.getCurrentDate()).observe(viewLifecycleOwner, Observer {\r\n            when(it.status){\r\n                ResponseBody.Status.SUCCESS ->{\r\n                    editor?.putString(SharedPreferencesHelper.from_date, DateHelper.instance.getCurrentDate().toString())\r\n                    editor?.commit()\r\n                }\r\n                ResponseBody.Status.ERROR ->{\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun getJsonArray(list: List<AdvertisementTracking>): JsonArray {\r\n        val jsonArray = JsonArray()\r\n        list.forEach {\r\n            val jsonObject = JsonObject().apply{\r\n                addProperty(\"date\",it.date/1000)\r\n                addProperty(\"advertisementId\",it.advertisementId)\r\n                addProperty(\"mediaType\",it.media_type)\r\n                add(\"slots\",getJsonArrayOfSlot(it.morning,it.noon,it.evening,it.night))\r\n            }\r\n            jsonArray.add(jsonObject)\r\n        }\r\n\r\n        return jsonArray\r\n\r\n    }\r\n\r\n    private fun getJsonArrayOfSlot(morning:Int,noon:Int,evening:Int,night:Int): JsonArray {\r\n        val jsonObject = JsonObject()\r\n        val jsonArray = JsonArray()\r\n        if(morning != 0){\r\n            jsonObject.addProperty(\"period\",\"mo\")\r\n            jsonObject.addProperty(\"value\",morning)\r\n        }\r\n        if(noon != 0){\r\n            jsonObject.addProperty(\"period\",\"no\")\r\n            jsonObject.addProperty(\"value\",noon)\r\n        }\r\n        if(evening != 0){\r\n            jsonObject.addProperty(\"period\",\"ev\")\r\n            jsonObject.addProperty(\"value\",evening)\r\n        }\r\n        if(night != 0){\r\n            jsonObject.addProperty(\"period\",\"ni\")\r\n            jsonObject.addProperty(\"value\",night)\r\n        }\r\n        jsonArray.add(jsonObject)\r\n        return jsonArray\r\n\r\n    }\r\n\r\n    private  fun fetchContent(){\r\n        contentViewModel.getContent(1,100,mContext)?.observe(viewLifecycleOwner , Observer<ContentResponse> {\r\n            dialog?.dismiss()\r\n            if (it != null) {\r\n                if (it.isSuccess) {\r\n                    val images = it.imageList.toList()\r\n                    val videos = it.videoList.toList()\r\n                    if (images.isNullOrEmpty() && videos.isNullOrEmpty()){\r\n                        startThread(getString(R.string.no_data_found))\r\n                        return@Observer\r\n                    }else{\r\n                        if(isAlive) removeThread()\r\n                        constraintLayoutDateCell?.let {\r\n                            it.visibility = View.VISIBLE\r\n                        }\r\n                        launch {\r\n                            setTime()\r\n                            if (!images.isNullOrEmpty()){\r\n                                setUpImageAdapter(images)\r\n                                setUpWifiAndQRCodeAdapter(images)\r\n                            }\r\n                            setUpAdapter(videos)\r\n                            startVideoService(videos)\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n\r\n                    if (!it.mResponseErrors?.errors.isNullOrEmpty()) {\r\n                        it.mResponseErrors?.errors?.let {\r\n\r\n                            startThread(getString(R.string.no_data_found))\r\n                        }\r\n                    } else if (it.mThrowable != null) {\r\n\r\n                        if (it.mThrowable is IOException) {\r\n                            startThread(getString(R.string.network_Issue))\r\n\r\n                        } else {\r\n                            startThread(getString(R.string.conversion_Issue))\r\n\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                startThread(getString(R.string.unknown_error))\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun setUpWifiAndQRCodeAdapter(list:List<Data>){\r\n\r\n        wifiAndQRCodeAdapter = WifiAndQRCodeAdapter(mContext,list)\r\n        bottomRightPromotion.apply {\r\n            adapter = wifiAndQRCodeAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n\r\n    }\r\n\r\n    private fun setUpAdapter(list:List<Data>){\r\n        Log.d(\"onViewCreated\",\"ImageAdapter called ${position}\")\r\n        bottomBannerAdapter = BottomBannerAdapter(mContext,list)\r\n        bottomLeftPromtion.apply {\r\n            adapter = bottomBannerAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n    }\r\n\r\n    private fun setUpImageAdapter(images:List<Data>){\r\n        imageBannerAdapter = ImageBannerAdapter(mContext,images)\r\n        viewPageSideBanner.apply {\r\n            adapter = imageBannerAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n        launch {\r\n            while (isActive){\r\n                images[count].contentId?.let {\r\n                    viewModel.insertLog(it, DateHelper.instance.getCurrentDate(), DateHelper.instance.getCurrentPeriod(),Type.IMAGE.media_type)\r\n                }\r\n                viewPageSideBanner.setCurrentItem(count,true)\r\n                bottomRightPromotion.setCurrentItem(count,true)\r\n                if(imageBannerAdapter?.itemCount!! - 1 === count) count = 0 else count++\r\n                delay(15 * 1000)\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private fun removeThread(){\r\n        if(callApiJob.isActive) callApiJob.cancelChildren()\r\n        isAlive=false\r\n        EventBus.getDefault().post(DemoVideo(false,\"\"))\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    fun onEvent(animateVideo: AnimateVideo){\r\n        try {\r\n            launch {\r\n                position = animateVideo.position\r\n                bottomLeftPromtion.setCurrentItem(position, true)\r\n            }\r\n\r\n        }catch (e:Exception){\r\n\r\n        }\r\n    }\r\n\r\n    private fun videoProgressbarRunnable() {\r\n        launch{\r\n            while (isActive){\r\n                val current = (playerView.player?.currentPosition)!!.toInt()\r\n                val progress = current * 100 / (playerView.player?.duration)!!.toInt()\r\n                videoRingProgressBar?.progress = progress\r\n                delay(1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun startThread(errorMessage:String) {\r\n        isAlive = true\r\n        EventBus.getDefault().post(DemoVideo(true, errorMessage))\r\n        CoroutineScope(Dispatchers.Main + callApiJob).launch {\r\n            delay(SEC * MIL)\r\n            fetchContent()\r\n\r\n        }\r\n    }\r\n\r\n    private fun startVideoService(list:List<Data>){\r\n        val intent = Intent(mContext, VideoService::class.java)\r\n        intent.putExtra(\"video_list\", list as ArrayList<Data>)\r\n        mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE)\r\n\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        cancel()\r\n        //mContext.unbindService(connection)\r\n        callApiJob.cancel()\r\n        AdvertisementsHelper.instance.deleteCache()\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        EventBus.getDefault().register(this)\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        EventBus.getDefault().unregister(this)\r\n    }\r\n\r\n    private val connection = object : ServiceConnection {\r\n        override fun onServiceDisconnected(name: ComponentName?) {\r\n\r\n        }\r\n        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {\r\n            if (service is VideoService.VideoServiceBinder) {\r\n                playerView.player = service.getExoPlayerInstance()\r\n                bottomLeftPromtion.setCurrentItem(playerView.player?.currentPeriodIndex!!,true)\r\n                videoProgressbarRunnable()\r\n            }\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/routesme/taxi/view/fragment/ContentFragment.kt	(revision 69849cd5bc3f6d243755382024af1b8c02a42478)
+++ app/src/main/java/com/routesme/taxi/view/fragment/ContentFragment.kt	(date 1615959346951)
@@ -119,10 +119,8 @@
 
         WorkManager.getInstance().getWorkInfoByIdLiveData(App.periodicWorkRequest.id)
                 .observe(viewLifecycleOwner, Observer { workInfo ->
-
                     val status = workInfo.state.name
-                    Log.d("Worker","${status}")
-                    if((workInfo != null) && (workInfo.state == WorkInfo.State.ENQUEUED)){
+                    if((workInfo != null) && (workInfo.state == WorkInfo.State.RUNNING)){
                         observeAnalytics()
                     }
                 })
Index: app/src/main/java/com/routesme/taxi/data/model/HomeScreenModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.taxi.data.model\r\n\r\ninterface IModeChanging {\r\n    fun onModeChange()\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/routesme/taxi/data/model/HomeScreenModel.kt	(revision 69849cd5bc3f6d243755382024af1b8c02a42478)
+++ app/src/main/java/com/routesme/taxi/data/model/HomeScreenModel.kt	(date 1615959346998)
@@ -2,5 +2,4 @@
 
 interface IModeChanging {
     fun onModeChange()
-
-}
\ No newline at end of file
+}   
\ No newline at end of file
