Index: app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.vehicles.view.fragment\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.*\r\nimport android.os.Bundle\r\nimport android.os.IBinder\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.work.ExistingPeriodicWorkPolicy\r\nimport androidx.work.WorkManager\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.RequestManager\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\r\nimport com.bumptech.glide.request.RequestOptions\r\nimport com.routesme.vehicles.data.model.ContentResponse\r\nimport com.routesme.vehicles.data.model.Data\r\nimport com.routesme.vehicles.R\r\nimport com.routesme.vehicles.helper.AdvertisementsHelper\r\nimport com.routesme.vehicles.helper.DateHelper\r\nimport com.routesme.vehicles.helper.DateOperations\r\nimport com.routesme.vehicles.helper.SharedPreferencesHelper\r\nimport com.routesme.vehicles.room.AdvertisementDatabase\r\nimport com.routesme.vehicles.room.factory.ViewModelFactory\r\nimport com.routesme.vehicles.room.helper.DatabaseHelperImpl\r\nimport com.routesme.vehicles.room.viewmodel.RoomDBViewModel\r\nimport com.routesme.vehicles.App\r\nimport com.routesme.vehicles.service.VideoService\r\nimport com.routesme.vehicles.view.adapter.BottomBannerAdapter\r\nimport com.routesme.vehicles.view.adapter.ImageBannerAdapter\r\nimport com.routesme.vehicles.view.adapter.WifiAndQRCodeAdapter\r\nimport com.routesme.vehicles.view.events.AnimateVideo\r\nimport com.routesme.vehicles.view.events.DemoVideo\r\nimport com.routesme.vehicles.view.utils.Type\r\nimport com.routesme.vehicles.viewmodel.ContentViewModel\r\nimport dmax.dialog.SpotsDialog\r\nimport kotlinx.android.synthetic.taxi.content_fragment.*\r\nimport kotlinx.android.synthetic.taxi.date_cell.*\r\nimport kotlinx.coroutines.*\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.io.IOException\r\nimport java.util.*\r\n\r\nclass ContentFragment : Fragment(), CoroutineScope by MainScope() {\r\n    private val SEND_ANALYTICS_REPORT = \"SEND_ANALYTICS_REPORT\"\r\n    private lateinit var mContext: Context\r\n    private var sharedPreferences: SharedPreferences? = null\r\n    private var editor: SharedPreferences.Editor? = null\r\n    private var device_id: String = \"\"\r\n    private val SEC: Long = 30\r\n    private var position = 0\r\n    private val MIL: Long = 1000\r\n    private var count = 0\r\n    private var dialog: SpotsDialog? = null\r\n    private var isAlive = false\r\n    private val dateOperations = DateOperations.instance\r\n    private lateinit var callApiJob: Job\r\n    private var bottomBannerAdapter: BottomBannerAdapter? = null\r\n    private var wifiAndQRCodeAdapter: WifiAndQRCodeAdapter? = null\r\n    private var imageBannerAdapter: ImageBannerAdapter? = null\r\n    private lateinit var viewModel: RoomDBViewModel\r\n    private var date = Date()\r\n    private lateinit var glide: RequestManager\r\n    private lateinit var contentViewModel: ContentViewModel\r\n    private lateinit var imageOptions: RequestOptions\r\n    private var workManager = WorkManager.getInstance()\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        mContext = context\r\n    }\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        val view : View = inflater.inflate(R.layout.content_fragment, container, false)\r\n        return view\r\n    }\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        callApiJob = Job()\r\n        sharedPreferences = context?.getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE)\r\n        editor= sharedPreferences?.edit()\r\n        glide = Glide.with(App.instance)\r\n        imageOptions = RequestOptions().diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)\r\n        device_id = sharedPreferences?.getString(SharedPreferencesHelper.device_id, null)!!\r\n        viewModel = ViewModelProvider(this, ViewModelFactory(DatabaseHelperImpl(AdvertisementDatabase.invoke(mContext)))).get(RoomDBViewModel::class.java)\r\n        contentViewModel = ViewModelProvider(this.requireActivity()).get(ContentViewModel::class.java)\r\n        workManager.enqueueUniquePeriodicWork(SEND_ANALYTICS_REPORT, ExistingPeriodicWorkPolicy.KEEP, App.periodicWorkRequest)\r\n        fetchContent()\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun setTime() {\r\n\r\n        launch {\r\n            while (isActive){\r\n                date = Date()\r\n                clockTv.text = dateOperations.timeClock(date)\r\n                dayTv.text = \"${dateOperations.dayOfWeek(date)} \\n ${dateOperations.date(date)}\"\r\n                delay(60 * 1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun fetchContent() {\r\n        contentViewModel.getContent(1, 100, mContext)?.observe(viewLifecycleOwner, Observer<ContentResponse> {\r\n            dialog?.dismiss()\r\n            if (it != null) {\r\n                if (it.isSuccess) {\r\n                    val images = it.imageList.toList()\r\n                    val videos = it.videoList.toList()\r\n                    if (images.isNullOrEmpty() && videos.isNullOrEmpty()) {\r\n                        startThread(getString(R.string.no_data_found))\r\n                        return@Observer\r\n                    } else {\r\n                        if (isAlive) removeThread()\r\n                        constraintLayoutDateCell?.let {\r\n                            it.visibility = View.VISIBLE\r\n                        }\r\n                        launch {\r\n                            setTime()\r\n                            if (!images.isNullOrEmpty()) {\r\n                                setUpImageAdapter(images)\r\n                                setUpWifiAndQRCodeAdapter(images)\r\n                            }\r\n                            setUpAdapter(videos)\r\n                            startVideoService(videos)\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n\r\n                    if (!it.mResponseErrors?.errors.isNullOrEmpty()) {\r\n                        it.mResponseErrors?.errors?.let {\r\n\r\n                            startThread(getString(R.string.no_data_found))\r\n                        }\r\n                    } else if (it.mThrowable != null) {\r\n\r\n                        if (it.mThrowable is IOException) {\r\n                            startThread(getString(R.string.network_Issue))\r\n\r\n                        } else {\r\n                            startThread(getString(R.string.conversion_Issue))\r\n\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                startThread(getString(R.string.unknown_error))\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun setUpWifiAndQRCodeAdapter(list: List<Data>) {\r\n\r\n        wifiAndQRCodeAdapter = WifiAndQRCodeAdapter(mContext, list)\r\n        bottomRightPromotion.apply {\r\n            adapter = wifiAndQRCodeAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n\r\n    }\r\n\r\n    private fun setUpAdapter(list: List<Data>) {\r\n        bottomBannerAdapter = BottomBannerAdapter(mContext, list)\r\n        bottomLeftPromtion.apply {\r\n            adapter = bottomBannerAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n    }\r\n\r\n    private fun setUpImageAdapter(images: List<Data>) {\r\n        imageBannerAdapter = ImageBannerAdapter(mContext, images)\r\n        viewPageSideBanner.apply {\r\n            adapter = imageBannerAdapter\r\n            isUserInputEnabled = false\r\n        }\r\n        launch {\r\n            while (isActive) {\r\n                images[count].contentId?.let {\r\n                    viewModel.insertLog(it,DateHelper.instance.getCurrentDate(), DateHelper.instance.getCurrentPeriod(), Type.IMAGE.media_type)\r\n                }\r\n                viewPageSideBanner.setCurrentItem(count, true)\r\n                bottomRightPromotion.setCurrentItem(count, true)\r\n                if (imageBannerAdapter?.itemCount!! - 1 === count) count = 0 else count++\r\n                delay(15 * 1000)\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    private fun removeThread() {\r\n        if (callApiJob.isActive) callApiJob.cancelChildren()\r\n        isAlive = false\r\n        EventBus.getDefault().post(DemoVideo(false, \"\"))\r\n    }\r\n\r\n    @Subscribe(threadMode = ThreadMode.MAIN)\r\n    fun onEvent(animateVideo: AnimateVideo) {\r\n        try {\r\n            launch {\r\n                position = animateVideo.position\r\n                bottomLeftPromtion.setCurrentItem(position, true)\r\n            }\r\n\r\n        } catch (e: Exception) {\r\n\r\n        }\r\n    }\r\n\r\n    private fun videoProgressbarRunnable() {\r\n        launch {\r\n            while (isActive) {\r\n                val current = (playerView.player?.currentPosition)!!.toInt()\r\n                val progress = current * 100 / (playerView.player?.duration)!!.toInt()\r\n                videoRingProgressBar?.progress = progress\r\n                delay(1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun startThread(errorMessage: String) {\r\n        isAlive = true\r\n        EventBus.getDefault().post(DemoVideo(true, errorMessage))\r\n        CoroutineScope(Dispatchers.Main + callApiJob).launch {\r\n            delay(SEC * MIL)\r\n            fetchContent()\r\n\r\n        }\r\n    }\r\n\r\n    private fun startVideoService(list: List<Data>) {\r\n        val intent = Intent(mContext, VideoService::class.java)\r\n        intent.putExtra(\"video_list\", list as ArrayList<Data>)\r\n        mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE)\r\n\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        cancel()\r\n        callApiJob.cancel()\r\n        AdvertisementsHelper.instance.deleteCache()\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        EventBus.getDefault().register(this)\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        EventBus.getDefault().unregister(this)\r\n    }\r\n\r\n    private val connection = object : ServiceConnection {\r\n        override fun onServiceDisconnected(name: ComponentName?) {\r\n\r\n        }\r\n\r\n        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {\r\n            if (service is VideoService.VideoServiceBinder) {\r\n                playerView.player = service.getExoPlayerInstance()\r\n                bottomLeftPromtion.setCurrentItem(playerView.player?.currentPeriodIndex!!, true)\r\n                videoProgressbarRunnable()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt	(revision e248d5eb20c0e88c4198873a749b4af8708e517b)
+++ app/src/taxi/java/com/routesme/vehicles/view/fragment/ContentFragment.kt	(date 1621413365557)
@@ -70,6 +70,7 @@
     private lateinit var glide: RequestManager
     private lateinit var contentViewModel: ContentViewModel
     private lateinit var imageOptions: RequestOptions
+    private lateinit var dbHelper : DatabaseHelperImpl
     private var workManager = WorkManager.getInstance()
     override fun onAttach(context: Context) {
         super.onAttach(context)
@@ -84,6 +85,7 @@
         super.onActivityCreated(savedInstanceState)
         callApiJob = Job()
         sharedPreferences = context?.getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE)
+        dbHelper = DatabaseHelperImpl(AdvertisementDatabase.invoke(mContext))
         editor= sharedPreferences?.edit()
         glide = Glide.with(App.instance)
         imageOptions = RequestOptions().diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)
@@ -184,6 +186,9 @@
         }
         launch {
             while (isActive) {
+                dbHelper.getAllList().forEach {
+                    Log.d("DataBase","${it.advertisementId},${it.time_in_day},${it.media_type},${it.morning},${it.noon},${it.date}")
+                }
                 images[count].contentId?.let {
                     viewModel.insertLog(it,DateHelper.instance.getCurrentDate(), DateHelper.instance.getCurrentPeriod(), Type.IMAGE.media_type)
                 }
@@ -207,6 +212,7 @@
     @Subscribe(threadMode = ThreadMode.MAIN)
     fun onEvent(animateVideo: AnimateVideo) {
         try {
+
             launch {
                 position = animateVideo.position
                 bottomLeftPromtion.setCurrentItem(position, true)
Index: app/src/main/java/com/routesme/vehicles/helper/DateHelper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.vehicles.helper\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.util.Log\r\nimport com.routesme.vehicles.view.utils.Period\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport java.util.concurrent.TimeUnit\r\n\r\nclass DateHelper {\r\n    private val simpleDateFormat = SimpleDateFormat(\"yyMMdd\", Locale.ENGLISH)\r\n    companion object {\r\n\r\n        val instance = DateHelper()\r\n    }\r\n\r\n    private fun currentDate(): Date {\r\n        val calendar = Calendar.getInstance()\r\n        val hour = calendar.get(Calendar.HOUR_OF_DAY)\r\n        val minute = calendar.get(Calendar.MINUTE)\r\n        return parseDate(\"$hour:$minute\")\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    private fun parseDate(time: String) = SimpleDateFormat(\"HH:mm\").parse(time)\r\n\r\n    fun checkDate(from_date: Long): Boolean {\r\n        val diff = TimeUnit.DAYS.convert((getCurrentDate() - from_date), TimeUnit.MILLISECONDS)\r\n        Log.d(\"Diff\", \"${diff}\")\r\n        return diff > 0\r\n    }\r\n\r\n    fun getDateDifferenceByOne(from_date: Long): Boolean {\r\n\r\n        val diff = TimeUnit.DAYS.convert((getCurrentDate() - from_date), TimeUnit.MILLISECONDS)\r\n        return diff > 0\r\n\r\n    }\r\n\r\n    fun checkAccessTokenExp(from_date: Long): Boolean {\r\n\r\n        val diff = TimeUnit.DAYS.convert((getCurrentDate() - from_date), TimeUnit.MILLISECONDS)\r\n        return diff < 5\r\n\r\n    }\r\n\r\n    fun getCurrentPeriod(): Period {\r\n\r\n        if (isMorning()) {\r\n\r\n            return Period.MORNING\r\n\r\n        } else if (isNoon()) {\r\n\r\n            return Period.NOON\r\n\r\n        } else if (isEvening()) {\r\n\r\n            return Period.EVENING\r\n        } else {\r\n\r\n            return Period.NIGHT\r\n        }\r\n\r\n    }\r\n\r\n    fun getCurrentDate() = Calendar.getInstance().timeInMillis\r\n\r\n    fun getDateString(time: Long) : String = simpleDateFormat.format(time)\r\n\r\n    fun isMorning() = currentDate().after(parseDate(\"06:00\")) && currentDate().before(parseDate(\"11:59\"))\r\n    fun isNoon() = currentDate().after(parseDate(\"12:00\")) && currentDate().before(parseDate(\"16:59\"))\r\n    fun isEvening() = currentDate().after(parseDate(\"17:00\")) && currentDate().before(parseDate(\"23:59\"))\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/routesme/vehicles/helper/DateHelper.kt	(revision e248d5eb20c0e88c4198873a749b4af8708e517b)
+++ app/src/main/java/com/routesme/vehicles/helper/DateHelper.kt	(date 1621413365521)
@@ -8,7 +8,7 @@
 import java.util.concurrent.TimeUnit
 
 class DateHelper {
-    private val simpleDateFormat = SimpleDateFormat("yyMMdd", Locale.ENGLISH)
+    private val simpleDateFormat = SimpleDateFormat("yyMMddHHmm", Locale.ENGLISH)
     companion object {
 
         val instance = DateHelper()
Index: app/src/main/java/com/routesme/vehicles/App.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.routesme.vehicles\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.app.Application\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.work.BackoffPolicy\r\nimport androidx.work.Constraints\r\nimport androidx.work.NetworkType\r\nimport androidx.work.PeriodicWorkRequest\r\nimport com.google.firebase.analytics.FirebaseAnalytics\r\nimport com.routesme.vehicles.helper.DisplayManager\r\nimport com.routesme.vehicles.service.TrackingService\r\nimport com.routesme.vehicles.data.model.SignInCredentials\r\nimport com.routesme.vehicles.worker.TaskManager\r\nimport com.routesme.vehicles.helper.SharedPreferencesHelper\r\nimport com.routesme.vehicles.uplevels.Account\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport java.util.concurrent.TimeUnit\r\n\r\nclass App : Application() {\r\n    val account = Account()\r\n    private val displayManager = DisplayManager.instance\r\n    var signInCredentials: SignInCredentials? = null\r\n    var isNewLogin = false\r\n    var institutionId: String? = null\r\n    var taxiPlateNumber: String? = null\r\n    var vehicleId: String? = null\r\n    var institutionName: String? = null\r\n    var isRefreshActivityAlive: Boolean = false\r\n\r\n    companion object {\r\n        @get:Synchronized\r\n        var instance = App()\r\n        val constraint: Constraints = Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build()\r\n        val periodicWorkRequest: PeriodicWorkRequest = PeriodicWorkRequest.Builder(TaskManager::class.java, 1, TimeUnit.DAYS).setConstraints(constraint).setBackoffCriteria(BackoffPolicy.LINEAR, PeriodicWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS).build()\r\n    }\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        instance = this\r\n        logApplicationStartingPeriod(currentPeriod())\r\n        displayManager.setAlarm(this)\r\n        startTrackingService()\r\n    }\r\n\r\n    fun startTrackingService(){\r\n        val isRegistered = !getDeviceId().isNullOrEmpty()\r\n        if (isLocationPermissionsGranted() && isRegistered){\r\n            val intent = Intent(instance, TrackingService::class.java)\r\n            ContextCompat.startForegroundService(instance,intent)\r\n        }\r\n    }\r\n\r\n    private fun logApplicationStartingPeriod(timePeriod: TimePeriod) {\r\n        val params = Bundle()\r\n        params.putString(\"TimePeriod\", timePeriod.toString())\r\n        FirebaseAnalytics.getInstance(this).logEvent(\"application_starting_period\", params)\r\n    }\r\n    private fun currentPeriod(): TimePeriod {\r\n        val currentDate = currentDate()\r\n        return if (currentDate.after(parseDate(\"04:00\")) && currentDate.before(parseDate(\"12:00\"))) TimePeriod.Morning\r\n        else if (currentDate.after(parseDate(\"12:00\")) && currentDate.before(parseDate(\"17:00\"))) TimePeriod.Noon\r\n        else if (currentDate.after(parseDate(\"17:00\")) && currentDate.before(parseDate(\"24:00\"))) TimePeriod.Evening\r\n        else TimePeriod.Night\r\n    }\r\n    private fun currentDate(): Date {\r\n        val calendar = Calendar.getInstance()\r\n        val hour = calendar.get(Calendar.HOUR_OF_DAY)\r\n        val minute = calendar.get(Calendar.MINUTE)\r\n        return parseDate(\"$hour:$minute\")\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    private fun parseDate(time: String) = SimpleDateFormat(\"HH:mm\").parse(time)\r\n    enum class TimePeriod { Morning, Noon, Evening, Night }\r\n    private fun isLocationPermissionsGranted(): Boolean {\r\n        val permissions = arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION)\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            for (p in permissions) {\r\n                if (ContextCompat.checkSelfPermission(instance, p) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    private fun getDeviceId() =  getSharedPreferences(SharedPreferencesHelper.device_data, Activity.MODE_PRIVATE).getString(SharedPreferencesHelper.device_id,null)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/routesme/vehicles/App.kt	(revision e248d5eb20c0e88c4198873a749b4af8708e517b)
+++ app/src/main/java/com/routesme/vehicles/App.kt	(date 1621412863272)
@@ -39,7 +39,7 @@
         @get:Synchronized
         var instance = App()
         val constraint: Constraints = Constraints.Builder().setRequiredNetworkType(NetworkType.CONNECTED).build()
-        val periodicWorkRequest: PeriodicWorkRequest = PeriodicWorkRequest.Builder(TaskManager::class.java, 1, TimeUnit.DAYS).setConstraints(constraint).setBackoffCriteria(BackoffPolicy.LINEAR, PeriodicWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS).build()
+        val periodicWorkRequest: PeriodicWorkRequest = PeriodicWorkRequest.Builder(TaskManager::class.java, 4, TimeUnit.HOURS).setConstraints(constraint).setBackoffCriteria(BackoffPolicy.LINEAR, PeriodicWorkRequest.MIN_BACKOFF_MILLIS, TimeUnit.MILLISECONDS).build()
     }
 
     override fun onCreate() {
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_3_17_2021_8_36_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_3_17_2021_8_36_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_3_30_2021_9_40_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_3_30_2021_9_40_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_2_10_2021_10_53_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_2_10_2021_10_53_AM__Default_Changelist_.xml
